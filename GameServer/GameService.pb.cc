// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: GameService.proto

#include "GameService.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace protocol {
constexpr Login::Login(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , pwd_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct LoginDefaultTypeInternal {
  constexpr LoginDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~LoginDefaultTypeInternal() {}
  union {
    Login _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT LoginDefaultTypeInternal _Login_default_instance_;
constexpr CreateCharacter::CreateCharacter(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : charater_(nullptr){}
struct CreateCharacterDefaultTypeInternal {
  constexpr CreateCharacterDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CreateCharacterDefaultTypeInternal() {}
  union {
    CreateCharacter _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CreateCharacterDefaultTypeInternal _CreateCharacter_default_instance_;
constexpr CUpdateAccount::CUpdateAccount(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : charatertype_(0)
  , weapontype_(0)
  , usecash_(0){}
struct CUpdateAccountDefaultTypeInternal {
  constexpr CUpdateAccountDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CUpdateAccountDefaultTypeInternal() {}
  union {
    CUpdateAccount _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CUpdateAccountDefaultTypeInternal _CUpdateAccount_default_instance_;
constexpr SCurrentInfo::SCurrentInfo(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : charater_(nullptr)
  , cash_(0)
  , charatertype_(0)
  , weapontype_(0)
  , exp_(0){}
struct SCurrentInfoDefaultTypeInternal {
  constexpr SCurrentInfoDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SCurrentInfoDefaultTypeInternal() {}
  union {
    SCurrentInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SCurrentInfoDefaultTypeInternal _SCurrentInfo_default_instance_;
constexpr LoginAccess::LoginAccess(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : charater_()
  , weaponlist_()
  , _weaponlist_cached_byte_size_(0)
  , result_(0)
  , curcharatertype_(0)
  , curweapontype_(0)
  , cash_(0){}
struct LoginAccessDefaultTypeInternal {
  constexpr LoginAccessDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~LoginAccessDefaultTypeInternal() {}
  union {
    LoginAccess _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT LoginAccessDefaultTypeInternal _LoginAccess_default_instance_;
constexpr Charater::Charater(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , uuid_(0)
  , code_(0)
  , lv_(0){}
struct CharaterDefaultTypeInternal {
  constexpr CharaterDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CharaterDefaultTypeInternal() {}
  union {
    Charater _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CharaterDefaultTypeInternal _Charater_default_instance_;
constexpr Position::Position(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : x_(0)
  , y_(0)
  , z_(0)
  , yaw_(0){}
struct PositionDefaultTypeInternal {
  constexpr PositionDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~PositionDefaultTypeInternal() {}
  union {
    Position _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PositionDefaultTypeInternal _Position_default_instance_;
constexpr Unit::Unit(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , position_(nullptr)
  , uuid_(0u)
  , hp_(0u)
  , code_(0)
  , lv_(0)
  , state_(0)
  , weaponcode_(0){}
struct UnitDefaultTypeInternal {
  constexpr UnitDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~UnitDefaultTypeInternal() {}
  union {
    Unit _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT UnitDefaultTypeInternal _Unit_default_instance_;
constexpr SLoad::SLoad(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : unit_()
  , room_id_(0){}
struct SLoadDefaultTypeInternal {
  constexpr SLoadDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SLoadDefaultTypeInternal() {}
  union {
    SLoad _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SLoadDefaultTypeInternal _SLoad_default_instance_;
constexpr CLoad::CLoad(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : position_(nullptr)
  , uuid_(0){}
struct CLoadDefaultTypeInternal {
  constexpr CLoadDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CLoadDefaultTypeInternal() {}
  union {
    CLoad _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CLoadDefaultTypeInternal _CLoad_default_instance_;
constexpr SInsertplayer::SInsertplayer(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : player_(nullptr){}
struct SInsertplayerDefaultTypeInternal {
  constexpr SInsertplayerDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SInsertplayerDefaultTypeInternal() {}
  union {
    SInsertplayer _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SInsertplayerDefaultTypeInternal _SInsertplayer_default_instance_;
constexpr SMove::SMove(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : position_(nullptr)
  , uuid_(0)
  , is_monster_(false){}
struct SMoveDefaultTypeInternal {
  constexpr SMoveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SMoveDefaultTypeInternal() {}
  union {
    SMove _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SMoveDefaultTypeInternal _SMove_default_instance_;
constexpr SChat::SChat(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : text_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , type_(0u)
  , uuid_(0){}
struct SChatDefaultTypeInternal {
  constexpr SChatDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SChatDefaultTypeInternal() {}
  union {
    SChat _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SChatDefaultTypeInternal _SChat_default_instance_;
constexpr SPlayerData::SPlayerData(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : player_(nullptr)
  , exp_(0){}
struct SPlayerDataDefaultTypeInternal {
  constexpr SPlayerDataDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SPlayerDataDefaultTypeInternal() {}
  union {
    SPlayerData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SPlayerDataDefaultTypeInternal _SPlayerData_default_instance_;
constexpr SClosePlayer::SClosePlayer(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : uuid_(0){}
struct SClosePlayerDefaultTypeInternal {
  constexpr SClosePlayerDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SClosePlayerDefaultTypeInternal() {}
  union {
    SClosePlayer _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SClosePlayerDefaultTypeInternal _SClosePlayer_default_instance_;
constexpr UnitState::UnitState(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : unit_(nullptr)
  , attack_(nullptr)
  , is_monster_(false){}
struct UnitStateDefaultTypeInternal {
  constexpr UnitStateDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~UnitStateDefaultTypeInternal() {}
  union {
    UnitState _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT UnitStateDefaultTypeInternal _UnitState_default_instance_;
constexpr SUnitStates::SUnitStates(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : unit_state_(){}
struct SUnitStatesDefaultTypeInternal {
  constexpr SUnitStatesDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SUnitStatesDefaultTypeInternal() {}
  union {
    SUnitStates _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SUnitStatesDefaultTypeInternal _SUnitStates_default_instance_;
constexpr Attack::Attack(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : uuid_(0)
  , skill_code_(0)
  , target_uuid_(0){}
struct AttackDefaultTypeInternal {
  constexpr AttackDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~AttackDefaultTypeInternal() {}
  union {
    Attack _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT AttackDefaultTypeInternal _Attack_default_instance_;
constexpr CAttack::CAttack(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : position_(nullptr)
  , uuid_(0)
  , skill_code_(0)
  , target_uuid_(0){}
struct CAttackDefaultTypeInternal {
  constexpr CAttackDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CAttackDefaultTypeInternal() {}
  union {
    CAttack _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CAttackDefaultTypeInternal _CAttack_default_instance_;
constexpr Demage::Demage(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : position_(nullptr)
  , uuid_(0)
  , demage_(0)
  , is_heal_(false)
  , is_monster_(false){}
struct DemageDefaultTypeInternal {
  constexpr DemageDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~DemageDefaultTypeInternal() {}
  union {
    Demage _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT DemageDefaultTypeInternal _Demage_default_instance_;
constexpr SUnitDemage::SUnitDemage(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : demage_()
  , uuid_(0)
  , is_monster_(false){}
struct SUnitDemageDefaultTypeInternal {
  constexpr SUnitDemageDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SUnitDemageDefaultTypeInternal() {}
  union {
    SUnitDemage _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SUnitDemageDefaultTypeInternal _SUnitDemage_default_instance_;
constexpr SRoomQuest::SRoomQuest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : is_clear_(false)
  , kill_count_(0)
  , sum_kill_(0){}
struct SRoomQuestDefaultTypeInternal {
  constexpr SRoomQuestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SRoomQuestDefaultTypeInternal() {}
  union {
    SRoomQuest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SRoomQuestDefaultTypeInternal _SRoomQuest_default_instance_;
constexpr CMovePotal::CMovePotal(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : pre_room_id_(0)
  , next_room_id_(0){}
struct CMovePotalDefaultTypeInternal {
  constexpr CMovePotalDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMovePotalDefaultTypeInternal() {}
  union {
    CMovePotal _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMovePotalDefaultTypeInternal _CMovePotal_default_instance_;
constexpr SEndGame::SEndGame(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : end_game_(false){}
struct SEndGameDefaultTypeInternal {
  constexpr SEndGameDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SEndGameDefaultTypeInternal() {}
  union {
    SEndGame _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SEndGameDefaultTypeInternal _SEndGame_default_instance_;
constexpr CBuyCharater::CBuyCharater(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , charatertype_(0)
  , usecash_(0){}
struct CBuyCharaterDefaultTypeInternal {
  constexpr CBuyCharaterDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CBuyCharaterDefaultTypeInternal() {}
  union {
    CBuyCharater _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CBuyCharaterDefaultTypeInternal _CBuyCharater_default_instance_;
constexpr CBuyWeapon::CBuyWeapon(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : weapontype_(0)
  , usecash_(0){}
struct CBuyWeaponDefaultTypeInternal {
  constexpr CBuyWeaponDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CBuyWeaponDefaultTypeInternal() {}
  union {
    CBuyWeapon _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CBuyWeaponDefaultTypeInternal _CBuyWeapon_default_instance_;
constexpr SBuyResult::SBuyResult(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : charater_()
  , weaponlist_()
  , _weaponlist_cached_byte_size_(0)
  , result_(0)
  , curcharatertype_(0)
  , curweapontype_(0)
  , cash_(0){}
struct SBuyResultDefaultTypeInternal {
  constexpr SBuyResultDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SBuyResultDefaultTypeInternal() {}
  union {
    SBuyResult _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SBuyResultDefaultTypeInternal _SBuyResult_default_instance_;
constexpr CPlayerJump::CPlayerJump(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : isjump_(false)
  , uuid_(0){}
struct CPlayerJumpDefaultTypeInternal {
  constexpr CPlayerJumpDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CPlayerJumpDefaultTypeInternal() {}
  union {
    CPlayerJump _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CPlayerJumpDefaultTypeInternal _CPlayerJump_default_instance_;
constexpr CPlayerAim::CPlayerAim(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : isaim_(false)
  , uuid_(0){}
struct CPlayerAimDefaultTypeInternal {
  constexpr CPlayerAimDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CPlayerAimDefaultTypeInternal() {}
  union {
    CPlayerAim _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CPlayerAimDefaultTypeInternal _CPlayerAim_default_instance_;
constexpr SExpLv::SExpLv(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : uuid_(0)
  , lv_(0)
  , exp_(0){}
struct SExpLvDefaultTypeInternal {
  constexpr SExpLvDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SExpLvDefaultTypeInternal() {}
  union {
    SExpLv _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SExpLvDefaultTypeInternal _SExpLv_default_instance_;
constexpr ItemEquip::ItemEquip(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : item_code_(0){}
struct ItemEquipDefaultTypeInternal {
  constexpr ItemEquipDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ItemEquipDefaultTypeInternal() {}
  union {
    ItemEquip _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ItemEquipDefaultTypeInternal _ItemEquip_default_instance_;
constexpr ItemEtc::ItemEtc(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : item_code_(0)
  , item_count_(0){}
struct ItemEtcDefaultTypeInternal {
  constexpr ItemEtcDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ItemEtcDefaultTypeInternal() {}
  union {
    ItemEtc _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ItemEtcDefaultTypeInternal _ItemEtc_default_instance_;
constexpr DropMessage::DropMessage(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : itemequips_()
  , itemetcs_()
  , gold_(0){}
struct DropMessageDefaultTypeInternal {
  constexpr DropMessageDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~DropMessageDefaultTypeInternal() {}
  union {
    DropMessage _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT DropMessageDefaultTypeInternal _DropMessage_default_instance_;
constexpr SLoadInventory::SLoadInventory(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : itemequips_()
  , itemetcs_()
  , gold_(0){}
struct SLoadInventoryDefaultTypeInternal {
  constexpr SLoadInventoryDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SLoadInventoryDefaultTypeInternal() {}
  union {
    SLoadInventory _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SLoadInventoryDefaultTypeInternal _SLoadInventory_default_instance_;
constexpr CSellItems::CSellItems(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : itemequips_()
  , itemetcs_()
  , gold_(0){}
struct CSellItemsDefaultTypeInternal {
  constexpr CSellItemsDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CSellItemsDefaultTypeInternal() {}
  union {
    CSellItems _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CSellItemsDefaultTypeInternal _CSellItems_default_instance_;
constexpr DLoad::DLoad(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : unit_(nullptr){}
struct DLoadDefaultTypeInternal {
  constexpr DLoadDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~DLoadDefaultTypeInternal() {}
  union {
    DLoad _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT DLoadDefaultTypeInternal _DLoad_default_instance_;
}  // namespace protocol
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_GameService_2eproto[36];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_GameService_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_GameService_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_GameService_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::protocol::Login, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::protocol::Login, id_),
  PROTOBUF_FIELD_OFFSET(::protocol::Login, pwd_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::protocol::CreateCharacter, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::protocol::CreateCharacter, charater_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::protocol::CUpdateAccount, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::protocol::CUpdateAccount, charatertype_),
  PROTOBUF_FIELD_OFFSET(::protocol::CUpdateAccount, weapontype_),
  PROTOBUF_FIELD_OFFSET(::protocol::CUpdateAccount, usecash_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::protocol::SCurrentInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::protocol::SCurrentInfo, cash_),
  PROTOBUF_FIELD_OFFSET(::protocol::SCurrentInfo, charatertype_),
  PROTOBUF_FIELD_OFFSET(::protocol::SCurrentInfo, weapontype_),
  PROTOBUF_FIELD_OFFSET(::protocol::SCurrentInfo, charater_),
  PROTOBUF_FIELD_OFFSET(::protocol::SCurrentInfo, exp_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::protocol::LoginAccess, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::protocol::LoginAccess, result_),
  PROTOBUF_FIELD_OFFSET(::protocol::LoginAccess, charater_),
  PROTOBUF_FIELD_OFFSET(::protocol::LoginAccess, curcharatertype_),
  PROTOBUF_FIELD_OFFSET(::protocol::LoginAccess, curweapontype_),
  PROTOBUF_FIELD_OFFSET(::protocol::LoginAccess, cash_),
  PROTOBUF_FIELD_OFFSET(::protocol::LoginAccess, weaponlist_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::protocol::Charater, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::protocol::Charater, uuid_),
  PROTOBUF_FIELD_OFFSET(::protocol::Charater, code_),
  PROTOBUF_FIELD_OFFSET(::protocol::Charater, name_),
  PROTOBUF_FIELD_OFFSET(::protocol::Charater, lv_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::protocol::Position, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::protocol::Position, x_),
  PROTOBUF_FIELD_OFFSET(::protocol::Position, y_),
  PROTOBUF_FIELD_OFFSET(::protocol::Position, z_),
  PROTOBUF_FIELD_OFFSET(::protocol::Position, yaw_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::protocol::Unit, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::protocol::Unit, uuid_),
  PROTOBUF_FIELD_OFFSET(::protocol::Unit, hp_),
  PROTOBUF_FIELD_OFFSET(::protocol::Unit, code_),
  PROTOBUF_FIELD_OFFSET(::protocol::Unit, position_),
  PROTOBUF_FIELD_OFFSET(::protocol::Unit, name_),
  PROTOBUF_FIELD_OFFSET(::protocol::Unit, lv_),
  PROTOBUF_FIELD_OFFSET(::protocol::Unit, state_),
  PROTOBUF_FIELD_OFFSET(::protocol::Unit, weaponcode_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::protocol::SLoad, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::protocol::SLoad, unit_),
  PROTOBUF_FIELD_OFFSET(::protocol::SLoad, room_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::protocol::CLoad, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::protocol::CLoad, uuid_),
  PROTOBUF_FIELD_OFFSET(::protocol::CLoad, position_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::protocol::SInsertplayer, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::protocol::SInsertplayer, player_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::protocol::SMove, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::protocol::SMove, uuid_),
  PROTOBUF_FIELD_OFFSET(::protocol::SMove, position_),
  PROTOBUF_FIELD_OFFSET(::protocol::SMove, is_monster_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::protocol::SChat, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::protocol::SChat, type_),
  PROTOBUF_FIELD_OFFSET(::protocol::SChat, uuid_),
  PROTOBUF_FIELD_OFFSET(::protocol::SChat, text_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::protocol::SPlayerData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::protocol::SPlayerData, player_),
  PROTOBUF_FIELD_OFFSET(::protocol::SPlayerData, exp_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::protocol::SClosePlayer, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::protocol::SClosePlayer, uuid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::protocol::UnitState, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::protocol::UnitState, unit_),
  PROTOBUF_FIELD_OFFSET(::protocol::UnitState, is_monster_),
  PROTOBUF_FIELD_OFFSET(::protocol::UnitState, attack_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::protocol::SUnitStates, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::protocol::SUnitStates, unit_state_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::protocol::Attack, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::protocol::Attack, uuid_),
  PROTOBUF_FIELD_OFFSET(::protocol::Attack, skill_code_),
  PROTOBUF_FIELD_OFFSET(::protocol::Attack, target_uuid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::protocol::CAttack, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::protocol::CAttack, uuid_),
  PROTOBUF_FIELD_OFFSET(::protocol::CAttack, skill_code_),
  PROTOBUF_FIELD_OFFSET(::protocol::CAttack, target_uuid_),
  PROTOBUF_FIELD_OFFSET(::protocol::CAttack, position_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::protocol::Demage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::protocol::Demage, uuid_),
  PROTOBUF_FIELD_OFFSET(::protocol::Demage, demage_),
  PROTOBUF_FIELD_OFFSET(::protocol::Demage, position_),
  PROTOBUF_FIELD_OFFSET(::protocol::Demage, is_heal_),
  PROTOBUF_FIELD_OFFSET(::protocol::Demage, is_monster_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::protocol::SUnitDemage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::protocol::SUnitDemage, uuid_),
  PROTOBUF_FIELD_OFFSET(::protocol::SUnitDemage, is_monster_),
  PROTOBUF_FIELD_OFFSET(::protocol::SUnitDemage, demage_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::protocol::SRoomQuest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::protocol::SRoomQuest, is_clear_),
  PROTOBUF_FIELD_OFFSET(::protocol::SRoomQuest, kill_count_),
  PROTOBUF_FIELD_OFFSET(::protocol::SRoomQuest, sum_kill_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::protocol::CMovePotal, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::protocol::CMovePotal, pre_room_id_),
  PROTOBUF_FIELD_OFFSET(::protocol::CMovePotal, next_room_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::protocol::SEndGame, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::protocol::SEndGame, end_game_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::protocol::CBuyCharater, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::protocol::CBuyCharater, charatertype_),
  PROTOBUF_FIELD_OFFSET(::protocol::CBuyCharater, usecash_),
  PROTOBUF_FIELD_OFFSET(::protocol::CBuyCharater, name_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::protocol::CBuyWeapon, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::protocol::CBuyWeapon, weapontype_),
  PROTOBUF_FIELD_OFFSET(::protocol::CBuyWeapon, usecash_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::protocol::SBuyResult, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::protocol::SBuyResult, result_),
  PROTOBUF_FIELD_OFFSET(::protocol::SBuyResult, charater_),
  PROTOBUF_FIELD_OFFSET(::protocol::SBuyResult, curcharatertype_),
  PROTOBUF_FIELD_OFFSET(::protocol::SBuyResult, curweapontype_),
  PROTOBUF_FIELD_OFFSET(::protocol::SBuyResult, cash_),
  PROTOBUF_FIELD_OFFSET(::protocol::SBuyResult, weaponlist_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::protocol::CPlayerJump, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::protocol::CPlayerJump, isjump_),
  PROTOBUF_FIELD_OFFSET(::protocol::CPlayerJump, uuid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::protocol::CPlayerAim, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::protocol::CPlayerAim, isaim_),
  PROTOBUF_FIELD_OFFSET(::protocol::CPlayerAim, uuid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::protocol::SExpLv, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::protocol::SExpLv, uuid_),
  PROTOBUF_FIELD_OFFSET(::protocol::SExpLv, lv_),
  PROTOBUF_FIELD_OFFSET(::protocol::SExpLv, exp_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::protocol::ItemEquip, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::protocol::ItemEquip, item_code_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::protocol::ItemEtc, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::protocol::ItemEtc, item_code_),
  PROTOBUF_FIELD_OFFSET(::protocol::ItemEtc, item_count_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::protocol::DropMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::protocol::DropMessage, itemequips_),
  PROTOBUF_FIELD_OFFSET(::protocol::DropMessage, itemetcs_),
  PROTOBUF_FIELD_OFFSET(::protocol::DropMessage, gold_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::protocol::SLoadInventory, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::protocol::SLoadInventory, itemequips_),
  PROTOBUF_FIELD_OFFSET(::protocol::SLoadInventory, itemetcs_),
  PROTOBUF_FIELD_OFFSET(::protocol::SLoadInventory, gold_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::protocol::CSellItems, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::protocol::CSellItems, itemequips_),
  PROTOBUF_FIELD_OFFSET(::protocol::CSellItems, itemetcs_),
  PROTOBUF_FIELD_OFFSET(::protocol::CSellItems, gold_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::protocol::DLoad, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::protocol::DLoad, unit_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::protocol::Login)},
  { 8, -1, -1, sizeof(::protocol::CreateCharacter)},
  { 15, -1, -1, sizeof(::protocol::CUpdateAccount)},
  { 24, -1, -1, sizeof(::protocol::SCurrentInfo)},
  { 35, -1, -1, sizeof(::protocol::LoginAccess)},
  { 47, -1, -1, sizeof(::protocol::Charater)},
  { 57, -1, -1, sizeof(::protocol::Position)},
  { 67, -1, -1, sizeof(::protocol::Unit)},
  { 81, -1, -1, sizeof(::protocol::SLoad)},
  { 89, -1, -1, sizeof(::protocol::CLoad)},
  { 97, -1, -1, sizeof(::protocol::SInsertplayer)},
  { 104, -1, -1, sizeof(::protocol::SMove)},
  { 113, -1, -1, sizeof(::protocol::SChat)},
  { 122, -1, -1, sizeof(::protocol::SPlayerData)},
  { 130, -1, -1, sizeof(::protocol::SClosePlayer)},
  { 137, -1, -1, sizeof(::protocol::UnitState)},
  { 146, -1, -1, sizeof(::protocol::SUnitStates)},
  { 153, -1, -1, sizeof(::protocol::Attack)},
  { 162, -1, -1, sizeof(::protocol::CAttack)},
  { 172, -1, -1, sizeof(::protocol::Demage)},
  { 183, -1, -1, sizeof(::protocol::SUnitDemage)},
  { 192, -1, -1, sizeof(::protocol::SRoomQuest)},
  { 201, -1, -1, sizeof(::protocol::CMovePotal)},
  { 209, -1, -1, sizeof(::protocol::SEndGame)},
  { 216, -1, -1, sizeof(::protocol::CBuyCharater)},
  { 225, -1, -1, sizeof(::protocol::CBuyWeapon)},
  { 233, -1, -1, sizeof(::protocol::SBuyResult)},
  { 245, -1, -1, sizeof(::protocol::CPlayerJump)},
  { 253, -1, -1, sizeof(::protocol::CPlayerAim)},
  { 261, -1, -1, sizeof(::protocol::SExpLv)},
  { 270, -1, -1, sizeof(::protocol::ItemEquip)},
  { 277, -1, -1, sizeof(::protocol::ItemEtc)},
  { 285, -1, -1, sizeof(::protocol::DropMessage)},
  { 294, -1, -1, sizeof(::protocol::SLoadInventory)},
  { 303, -1, -1, sizeof(::protocol::CSellItems)},
  { 312, -1, -1, sizeof(::protocol::DLoad)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protocol::_Login_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protocol::_CreateCharacter_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protocol::_CUpdateAccount_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protocol::_SCurrentInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protocol::_LoginAccess_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protocol::_Charater_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protocol::_Position_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protocol::_Unit_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protocol::_SLoad_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protocol::_CLoad_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protocol::_SInsertplayer_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protocol::_SMove_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protocol::_SChat_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protocol::_SPlayerData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protocol::_SClosePlayer_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protocol::_UnitState_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protocol::_SUnitStates_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protocol::_Attack_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protocol::_CAttack_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protocol::_Demage_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protocol::_SUnitDemage_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protocol::_SRoomQuest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protocol::_CMovePotal_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protocol::_SEndGame_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protocol::_CBuyCharater_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protocol::_CBuyWeapon_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protocol::_SBuyResult_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protocol::_CPlayerJump_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protocol::_CPlayerAim_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protocol::_SExpLv_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protocol::_ItemEquip_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protocol::_ItemEtc_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protocol::_DropMessage_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protocol::_SLoadInventory_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protocol::_CSellItems_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protocol::_DLoad_default_instance_),
};

const char descriptor_table_protodef_GameService_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\021GameService.proto\022\010protocol\" \n\005Login\022\n"
  "\n\002id\030\001 \001(\t\022\013\n\003pwd\030\002 \001(\t\"7\n\017CreateCharact"
  "er\022$\n\010charater\030\001 \001(\0132\022.protocol.Charater"
  "\"K\n\016CUpdateAccount\022\024\n\014charaterType\030\001 \001(\005"
  "\022\022\n\nweaponType\030\002 \001(\005\022\017\n\007useCash\030\003 \001(\005\"y\n"
  "\014SCurrentInfo\022\014\n\004cash\030\001 \001(\005\022\024\n\014charaterT"
  "ype\030\002 \001(\005\022\022\n\nweaponType\030\003 \001(\005\022$\n\010charate"
  "r\030\004 \001(\0132\022.protocol.Charater\022\013\n\003exp\030\005 \001(\005"
  "\"\225\001\n\013LoginAccess\022\016\n\006result\030\001 \001(\005\022$\n\010char"
  "ater\030\002 \003(\0132\022.protocol.Charater\022\027\n\017curCha"
  "raterType\030\003 \001(\005\022\025\n\rcurWeaponType\030\004 \001(\005\022\014"
  "\n\004cash\030\005 \001(\005\022\022\n\nweaponList\030\006 \003(\005\"@\n\010Char"
  "ater\022\014\n\004uuid\030\001 \001(\005\022\014\n\004code\030\002 \001(\005\022\014\n\004name"
  "\030\003 \001(\t\022\n\n\002lv\030\004 \001(\005\"8\n\010Position\022\t\n\001x\030\001 \001("
  "\002\022\t\n\001y\030\002 \001(\002\022\t\n\001z\030\003 \001(\002\022\013\n\003yaw\030\004 \001(\002\"\221\001\n"
  "\004Unit\022\014\n\004uuid\030\001 \001(\r\022\n\n\002hp\030\002 \001(\r\022\014\n\004code\030"
  "\003 \001(\005\022$\n\010position\030\004 \001(\0132\022.protocol.Posit"
  "ion\022\014\n\004name\030\005 \001(\t\022\n\n\002lv\030\006 \001(\005\022\r\n\005state\030\007"
  " \001(\005\022\022\n\nweaponCode\030\010 \001(\005\";\n\005SLoad\022!\n\004uni"
  "t\030\001 \003(\0132\023.protocol.UnitState\022\017\n\007room_id\030"
  "\003 \001(\005\";\n\005CLoad\022\014\n\004uuid\030\001 \001(\005\022$\n\010position"
  "\030d \001(\0132\022.protocol.Position\"/\n\rSInsertpla"
  "yer\022\036\n\006player\030\001 \001(\0132\016.protocol.Unit\"O\n\005S"
  "Move\022\014\n\004uuid\030\001 \001(\005\022$\n\010position\030\002 \001(\0132\022.p"
  "rotocol.Position\022\022\n\nis_monster\030\003 \001(\010\"1\n\005"
  "SChat\022\014\n\004type\030\001 \001(\r\022\014\n\004uuid\030\002 \001(\005\022\014\n\004tex"
  "t\030\005 \001(\t\":\n\013SPlayerData\022\036\n\006player\030\001 \001(\0132\016"
  ".protocol.Unit\022\013\n\003exp\030\002 \001(\005\"\034\n\014SClosePla"
  "yer\022\014\n\004uuid\030\001 \001(\005\"_\n\tUnitState\022\034\n\004unit\030\001"
  " \001(\0132\016.protocol.Unit\022\022\n\nis_monster\030\n \001(\010"
  "\022 \n\006attack\030\013 \001(\0132\020.protocol.Attack\"6\n\013SU"
  "nitStates\022\'\n\nunit_state\030\001 \003(\0132\023.protocol"
  ".UnitState\"\?\n\006Attack\022\014\n\004uuid\030\001 \001(\005\022\022\n\nsk"
  "ill_code\030\002 \001(\005\022\023\n\013target_uuid\030\003 \001(\005\"f\n\007C"
  "Attack\022\014\n\004uuid\030\001 \001(\005\022\022\n\nskill_code\030\002 \001(\005"
  "\022\023\n\013target_uuid\030\003 \001(\005\022$\n\010position\030\004 \001(\0132"
  "\022.protocol.Position\"q\n\006Demage\022\014\n\004uuid\030\001 "
  "\001(\005\022\016\n\006demage\030\002 \001(\005\022$\n\010position\030\003 \001(\0132\022."
  "protocol.Position\022\017\n\007is_heal\030\004 \001(\010\022\022\n\nis"
  "_monster\030\n \001(\010\"Q\n\013SUnitDemage\022\014\n\004uuid\030\001 "
  "\001(\005\022\022\n\nis_monster\030\002 \001(\010\022 \n\006demage\030\003 \003(\0132"
  "\020.protocol.Demage\"D\n\nSRoomQuest\022\020\n\010is_cl"
  "ear\030\001 \001(\010\022\022\n\nkill_count\030\002 \001(\005\022\020\n\010sum_kil"
  "l\030\003 \001(\005\"7\n\nCMovePotal\022\023\n\013pre_room_id\030\001 \001"
  "(\005\022\024\n\014next_room_id\030\002 \001(\005\"\034\n\010SEndGame\022\020\n\010"
  "end_game\030\001 \001(\010\"C\n\014CBuyCharater\022\024\n\014Charat"
  "erType\030\001 \001(\005\022\017\n\007useCash\030\002 \001(\005\022\014\n\004name\030\003 "
  "\001(\t\"1\n\nCBuyWeapon\022\022\n\nweaponType\030\001 \001(\005\022\017\n"
  "\007useCash\030\002 \001(\005\"\224\001\n\nSBuyResult\022\016\n\006result\030"
  "\001 \001(\005\022$\n\010charater\030\002 \003(\0132\022.protocol.Chara"
  "ter\022\027\n\017curCharaterType\030\003 \001(\005\022\025\n\rcurWeapo"
  "nType\030\004 \001(\005\022\014\n\004cash\030\005 \001(\005\022\022\n\nweaponList\030"
  "\006 \003(\005\"+\n\013CPlayerJump\022\016\n\006isJump\030\001 \001(\010\022\014\n\004"
  "uuid\030\002 \001(\005\")\n\nCPlayerAim\022\r\n\005isAim\030\001 \001(\010\022"
  "\014\n\004uuid\030\002 \001(\005\"/\n\006SExpLv\022\014\n\004uuid\030\001 \001(\005\022\n\n"
  "\002lv\030\002 \001(\005\022\013\n\003exp\030\003 \001(\005\"\036\n\tItemEquip\022\021\n\ti"
  "tem_code\030\001 \001(\005\"0\n\007ItemEtc\022\021\n\titem_code\030\001"
  " \001(\005\022\022\n\nitem_count\030\002 \001(\005\"i\n\013DropMessage\022"
  "\'\n\nitemEquips\030\001 \003(\0132\023.protocol.ItemEquip"
  "\022#\n\010itemEtcs\030\002 \003(\0132\021.protocol.ItemEtc\022\014\n"
  "\004gold\030\003 \001(\005\"l\n\016SLoadInventory\022\'\n\nitemEqu"
  "ips\030\001 \003(\0132\023.protocol.ItemEquip\022#\n\010itemEt"
  "cs\030\002 \003(\0132\021.protocol.ItemEtc\022\014\n\004gold\030\003 \001("
  "\005\"h\n\nCSellItems\022\'\n\nitemEquips\030\001 \003(\0132\023.pr"
  "otocol.ItemEquip\022#\n\010itemEtcs\030\002 \003(\0132\021.pro"
  "tocol.ItemEtc\022\014\n\004gold\030\003 \001(\005\"%\n\005DLoad\022\034\n\004"
  "unit\030e \001(\0132\016.protocol.Unit*\332\003\n\013MessageCo"
  "de\022\t\n\005LOGIN\020\000\022\n\n\006S_LOAD\020\001\022\022\n\016S_INSERTPLA"
  "YER\020\002\022\n\n\006S_MOVE\020\003\022\n\n\006S_CHAT\020\004\022\020\n\014S_PLAYE"
  "RDATA\020\005\022\021\n\rS_CLOSEPLAYER\020\006\022\020\n\014S_UNITSTAT"
  "ES\020\007\022\014\n\010C_ATTACK\020\010\022\020\n\014S_UNITDEMAGE\020\n\022\017\n\013"
  "S_ROOMQUEST\020\014\022\017\n\013C_MOVEPOTAL\020\r\022\r\n\tS_ENDG"
  "AME\020\016\022\017\n\013LOGINACCESS\020\017\022\n\n\006C_LOAD\020\021\022\023\n\017CR"
  "EATECHARACTER\020\022\022\017\n\013DROPMESSAGE\020\023\022\021\n\rC_BU"
  "YCHARATER\020\024\022\017\n\013C_BUYWEAPON\020\025\022\023\n\017C_UPDATE"
  "ACCOUNT\020\026\022\021\n\rS_CURRENTINFO\020\027\022\017\n\013S_BUYRES"
  "ULT\020\030\022\020\n\014C_PLAYERJUMP\020\031\022\017\n\013C_PLAYERAIM\020\032"
  "\022\013\n\007S_EXPLV\020\033\022\023\n\017S_LOADINVENTORY\020\036\022\017\n\013C_"
  "SELLITEMS\020\037\022\n\n\006D_LOAD\020eb\006proto3"
  ;
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_GameService_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_GameService_2eproto = {
  false, false, 3151, descriptor_table_protodef_GameService_2eproto, "GameService.proto", 
  &descriptor_table_GameService_2eproto_once, nullptr, 0, 36,
  schemas, file_default_instances, TableStruct_GameService_2eproto::offsets,
  file_level_metadata_GameService_2eproto, file_level_enum_descriptors_GameService_2eproto, file_level_service_descriptors_GameService_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_GameService_2eproto_getter() {
  return &descriptor_table_GameService_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_GameService_2eproto(&descriptor_table_GameService_2eproto);
namespace protocol {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* MessageCode_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_GameService_2eproto);
  return file_level_enum_descriptors_GameService_2eproto[0];
}
bool MessageCode_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 10:
    case 12:
    case 13:
    case 14:
    case 15:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
    case 25:
    case 26:
    case 27:
    case 30:
    case 31:
    case 101:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class Login::_Internal {
 public:
};

Login::Login(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:protocol.Login)
}
Login::Login(const Login& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_id().empty()) {
    id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_id(), 
      GetArenaForAllocation());
  }
  pwd_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_pwd().empty()) {
    pwd_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_pwd(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:protocol.Login)
}

void Login::SharedCtor() {
id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
pwd_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

Login::~Login() {
  // @@protoc_insertion_point(destructor:protocol.Login)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Login::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  pwd_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Login::ArenaDtor(void* object) {
  Login* _this = reinterpret_cast< Login* >(object);
  (void)_this;
}
void Login::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Login::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Login::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.Login)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  id_.ClearToEmpty();
  pwd_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Login::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "protocol.Login.id"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string pwd = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_pwd();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "protocol.Login.pwd"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Login::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.Login)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1;
  if (!this->_internal_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "protocol.Login.id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_id(), target);
  }

  // string pwd = 2;
  if (!this->_internal_pwd().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_pwd().data(), static_cast<int>(this->_internal_pwd().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "protocol.Login.pwd");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_pwd(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.Login)
  return target;
}

size_t Login::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.Login)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string id = 1;
  if (!this->_internal_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  // string pwd = 2;
  if (!this->_internal_pwd().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_pwd());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Login::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Login::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Login::GetClassData() const { return &_class_data_; }

void Login::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Login *>(to)->MergeFrom(
      static_cast<const Login &>(from));
}


void Login::MergeFrom(const Login& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.Login)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_id().empty()) {
    _internal_set_id(from._internal_id());
  }
  if (!from._internal_pwd().empty()) {
    _internal_set_pwd(from._internal_pwd());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Login::CopyFrom(const Login& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.Login)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Login::IsInitialized() const {
  return true;
}

void Login::InternalSwap(Login* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &id_, lhs_arena,
      &other->id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &pwd_, lhs_arena,
      &other->pwd_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata Login::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_GameService_2eproto_getter, &descriptor_table_GameService_2eproto_once,
      file_level_metadata_GameService_2eproto[0]);
}

// ===================================================================

class CreateCharacter::_Internal {
 public:
  static const ::protocol::Charater& charater(const CreateCharacter* msg);
};

const ::protocol::Charater&
CreateCharacter::_Internal::charater(const CreateCharacter* msg) {
  return *msg->charater_;
}
CreateCharacter::CreateCharacter(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:protocol.CreateCharacter)
}
CreateCharacter::CreateCharacter(const CreateCharacter& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_charater()) {
    charater_ = new ::protocol::Charater(*from.charater_);
  } else {
    charater_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:protocol.CreateCharacter)
}

void CreateCharacter::SharedCtor() {
charater_ = nullptr;
}

CreateCharacter::~CreateCharacter() {
  // @@protoc_insertion_point(destructor:protocol.CreateCharacter)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CreateCharacter::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete charater_;
}

void CreateCharacter::ArenaDtor(void* object) {
  CreateCharacter* _this = reinterpret_cast< CreateCharacter* >(object);
  (void)_this;
}
void CreateCharacter::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CreateCharacter::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CreateCharacter::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.CreateCharacter)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && charater_ != nullptr) {
    delete charater_;
  }
  charater_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CreateCharacter::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .protocol.Charater charater = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_charater(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CreateCharacter::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.CreateCharacter)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .protocol.Charater charater = 1;
  if (this->_internal_has_charater()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::charater(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.CreateCharacter)
  return target;
}

size_t CreateCharacter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.CreateCharacter)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .protocol.Charater charater = 1;
  if (this->_internal_has_charater()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *charater_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CreateCharacter::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CreateCharacter::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CreateCharacter::GetClassData() const { return &_class_data_; }

void CreateCharacter::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CreateCharacter *>(to)->MergeFrom(
      static_cast<const CreateCharacter &>(from));
}


void CreateCharacter::MergeFrom(const CreateCharacter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.CreateCharacter)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_charater()) {
    _internal_mutable_charater()->::protocol::Charater::MergeFrom(from._internal_charater());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CreateCharacter::CopyFrom(const CreateCharacter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.CreateCharacter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreateCharacter::IsInitialized() const {
  return true;
}

void CreateCharacter::InternalSwap(CreateCharacter* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(charater_, other->charater_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CreateCharacter::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_GameService_2eproto_getter, &descriptor_table_GameService_2eproto_once,
      file_level_metadata_GameService_2eproto[1]);
}

// ===================================================================

class CUpdateAccount::_Internal {
 public:
};

CUpdateAccount::CUpdateAccount(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:protocol.CUpdateAccount)
}
CUpdateAccount::CUpdateAccount(const CUpdateAccount& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&charatertype_, &from.charatertype_,
    static_cast<size_t>(reinterpret_cast<char*>(&usecash_) -
    reinterpret_cast<char*>(&charatertype_)) + sizeof(usecash_));
  // @@protoc_insertion_point(copy_constructor:protocol.CUpdateAccount)
}

void CUpdateAccount::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&charatertype_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&usecash_) -
    reinterpret_cast<char*>(&charatertype_)) + sizeof(usecash_));
}

CUpdateAccount::~CUpdateAccount() {
  // @@protoc_insertion_point(destructor:protocol.CUpdateAccount)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CUpdateAccount::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CUpdateAccount::ArenaDtor(void* object) {
  CUpdateAccount* _this = reinterpret_cast< CUpdateAccount* >(object);
  (void)_this;
}
void CUpdateAccount::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CUpdateAccount::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CUpdateAccount::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.CUpdateAccount)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&charatertype_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&usecash_) -
      reinterpret_cast<char*>(&charatertype_)) + sizeof(usecash_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CUpdateAccount::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 charaterType = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          charatertype_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 weaponType = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          weapontype_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 useCash = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          usecash_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CUpdateAccount::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.CUpdateAccount)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 charaterType = 1;
  if (this->_internal_charatertype() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_charatertype(), target);
  }

  // int32 weaponType = 2;
  if (this->_internal_weapontype() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_weapontype(), target);
  }

  // int32 useCash = 3;
  if (this->_internal_usecash() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_usecash(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.CUpdateAccount)
  return target;
}

size_t CUpdateAccount::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.CUpdateAccount)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 charaterType = 1;
  if (this->_internal_charatertype() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_charatertype());
  }

  // int32 weaponType = 2;
  if (this->_internal_weapontype() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_weapontype());
  }

  // int32 useCash = 3;
  if (this->_internal_usecash() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_usecash());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CUpdateAccount::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CUpdateAccount::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CUpdateAccount::GetClassData() const { return &_class_data_; }

void CUpdateAccount::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CUpdateAccount *>(to)->MergeFrom(
      static_cast<const CUpdateAccount &>(from));
}


void CUpdateAccount::MergeFrom(const CUpdateAccount& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.CUpdateAccount)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_charatertype() != 0) {
    _internal_set_charatertype(from._internal_charatertype());
  }
  if (from._internal_weapontype() != 0) {
    _internal_set_weapontype(from._internal_weapontype());
  }
  if (from._internal_usecash() != 0) {
    _internal_set_usecash(from._internal_usecash());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CUpdateAccount::CopyFrom(const CUpdateAccount& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.CUpdateAccount)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CUpdateAccount::IsInitialized() const {
  return true;
}

void CUpdateAccount::InternalSwap(CUpdateAccount* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CUpdateAccount, usecash_)
      + sizeof(CUpdateAccount::usecash_)
      - PROTOBUF_FIELD_OFFSET(CUpdateAccount, charatertype_)>(
          reinterpret_cast<char*>(&charatertype_),
          reinterpret_cast<char*>(&other->charatertype_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CUpdateAccount::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_GameService_2eproto_getter, &descriptor_table_GameService_2eproto_once,
      file_level_metadata_GameService_2eproto[2]);
}

// ===================================================================

class SCurrentInfo::_Internal {
 public:
  static const ::protocol::Charater& charater(const SCurrentInfo* msg);
};

const ::protocol::Charater&
SCurrentInfo::_Internal::charater(const SCurrentInfo* msg) {
  return *msg->charater_;
}
SCurrentInfo::SCurrentInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:protocol.SCurrentInfo)
}
SCurrentInfo::SCurrentInfo(const SCurrentInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_charater()) {
    charater_ = new ::protocol::Charater(*from.charater_);
  } else {
    charater_ = nullptr;
  }
  ::memcpy(&cash_, &from.cash_,
    static_cast<size_t>(reinterpret_cast<char*>(&exp_) -
    reinterpret_cast<char*>(&cash_)) + sizeof(exp_));
  // @@protoc_insertion_point(copy_constructor:protocol.SCurrentInfo)
}

void SCurrentInfo::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&charater_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&exp_) -
    reinterpret_cast<char*>(&charater_)) + sizeof(exp_));
}

SCurrentInfo::~SCurrentInfo() {
  // @@protoc_insertion_point(destructor:protocol.SCurrentInfo)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SCurrentInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete charater_;
}

void SCurrentInfo::ArenaDtor(void* object) {
  SCurrentInfo* _this = reinterpret_cast< SCurrentInfo* >(object);
  (void)_this;
}
void SCurrentInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SCurrentInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SCurrentInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.SCurrentInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && charater_ != nullptr) {
    delete charater_;
  }
  charater_ = nullptr;
  ::memset(&cash_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&exp_) -
      reinterpret_cast<char*>(&cash_)) + sizeof(exp_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SCurrentInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 cash = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          cash_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 charaterType = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          charatertype_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 weaponType = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          weapontype_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .protocol.Charater charater = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_charater(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 exp = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          exp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SCurrentInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.SCurrentInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 cash = 1;
  if (this->_internal_cash() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_cash(), target);
  }

  // int32 charaterType = 2;
  if (this->_internal_charatertype() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_charatertype(), target);
  }

  // int32 weaponType = 3;
  if (this->_internal_weapontype() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_weapontype(), target);
  }

  // .protocol.Charater charater = 4;
  if (this->_internal_has_charater()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::charater(this), target, stream);
  }

  // int32 exp = 5;
  if (this->_internal_exp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_exp(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.SCurrentInfo)
  return target;
}

size_t SCurrentInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.SCurrentInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .protocol.Charater charater = 4;
  if (this->_internal_has_charater()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *charater_);
  }

  // int32 cash = 1;
  if (this->_internal_cash() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_cash());
  }

  // int32 charaterType = 2;
  if (this->_internal_charatertype() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_charatertype());
  }

  // int32 weaponType = 3;
  if (this->_internal_weapontype() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_weapontype());
  }

  // int32 exp = 5;
  if (this->_internal_exp() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_exp());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SCurrentInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SCurrentInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SCurrentInfo::GetClassData() const { return &_class_data_; }

void SCurrentInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SCurrentInfo *>(to)->MergeFrom(
      static_cast<const SCurrentInfo &>(from));
}


void SCurrentInfo::MergeFrom(const SCurrentInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.SCurrentInfo)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_charater()) {
    _internal_mutable_charater()->::protocol::Charater::MergeFrom(from._internal_charater());
  }
  if (from._internal_cash() != 0) {
    _internal_set_cash(from._internal_cash());
  }
  if (from._internal_charatertype() != 0) {
    _internal_set_charatertype(from._internal_charatertype());
  }
  if (from._internal_weapontype() != 0) {
    _internal_set_weapontype(from._internal_weapontype());
  }
  if (from._internal_exp() != 0) {
    _internal_set_exp(from._internal_exp());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SCurrentInfo::CopyFrom(const SCurrentInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.SCurrentInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SCurrentInfo::IsInitialized() const {
  return true;
}

void SCurrentInfo::InternalSwap(SCurrentInfo* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SCurrentInfo, exp_)
      + sizeof(SCurrentInfo::exp_)
      - PROTOBUF_FIELD_OFFSET(SCurrentInfo, charater_)>(
          reinterpret_cast<char*>(&charater_),
          reinterpret_cast<char*>(&other->charater_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SCurrentInfo::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_GameService_2eproto_getter, &descriptor_table_GameService_2eproto_once,
      file_level_metadata_GameService_2eproto[3]);
}

// ===================================================================

class LoginAccess::_Internal {
 public:
};

LoginAccess::LoginAccess(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  charater_(arena),
  weaponlist_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:protocol.LoginAccess)
}
LoginAccess::LoginAccess(const LoginAccess& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      charater_(from.charater_),
      weaponlist_(from.weaponlist_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&result_, &from.result_,
    static_cast<size_t>(reinterpret_cast<char*>(&cash_) -
    reinterpret_cast<char*>(&result_)) + sizeof(cash_));
  // @@protoc_insertion_point(copy_constructor:protocol.LoginAccess)
}

void LoginAccess::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&result_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&cash_) -
    reinterpret_cast<char*>(&result_)) + sizeof(cash_));
}

LoginAccess::~LoginAccess() {
  // @@protoc_insertion_point(destructor:protocol.LoginAccess)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void LoginAccess::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void LoginAccess::ArenaDtor(void* object) {
  LoginAccess* _this = reinterpret_cast< LoginAccess* >(object);
  (void)_this;
}
void LoginAccess::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void LoginAccess::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void LoginAccess::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.LoginAccess)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  charater_.Clear();
  weaponlist_.Clear();
  ::memset(&result_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&cash_) -
      reinterpret_cast<char*>(&result_)) + sizeof(cash_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LoginAccess::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 result = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          result_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .protocol.Charater charater = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_charater(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // int32 curCharaterType = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          curcharatertype_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 curWeaponType = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          curweapontype_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 cash = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          cash_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated int32 weaponList = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_weaponlist(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48) {
          _internal_add_weaponlist(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LoginAccess::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.LoginAccess)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 result = 1;
  if (this->_internal_result() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_result(), target);
  }

  // repeated .protocol.Charater charater = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_charater_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_charater(i), target, stream);
  }

  // int32 curCharaterType = 3;
  if (this->_internal_curcharatertype() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_curcharatertype(), target);
  }

  // int32 curWeaponType = 4;
  if (this->_internal_curweapontype() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_curweapontype(), target);
  }

  // int32 cash = 5;
  if (this->_internal_cash() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_cash(), target);
  }

  // repeated int32 weaponList = 6;
  {
    int byte_size = _weaponlist_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          6, _internal_weaponlist(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.LoginAccess)
  return target;
}

size_t LoginAccess::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.LoginAccess)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .protocol.Charater charater = 2;
  total_size += 1UL * this->_internal_charater_size();
  for (const auto& msg : this->charater_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated int32 weaponList = 6;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->weaponlist_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _weaponlist_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // int32 result = 1;
  if (this->_internal_result() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_result());
  }

  // int32 curCharaterType = 3;
  if (this->_internal_curcharatertype() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_curcharatertype());
  }

  // int32 curWeaponType = 4;
  if (this->_internal_curweapontype() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_curweapontype());
  }

  // int32 cash = 5;
  if (this->_internal_cash() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_cash());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData LoginAccess::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    LoginAccess::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*LoginAccess::GetClassData() const { return &_class_data_; }

void LoginAccess::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<LoginAccess *>(to)->MergeFrom(
      static_cast<const LoginAccess &>(from));
}


void LoginAccess::MergeFrom(const LoginAccess& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.LoginAccess)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  charater_.MergeFrom(from.charater_);
  weaponlist_.MergeFrom(from.weaponlist_);
  if (from._internal_result() != 0) {
    _internal_set_result(from._internal_result());
  }
  if (from._internal_curcharatertype() != 0) {
    _internal_set_curcharatertype(from._internal_curcharatertype());
  }
  if (from._internal_curweapontype() != 0) {
    _internal_set_curweapontype(from._internal_curweapontype());
  }
  if (from._internal_cash() != 0) {
    _internal_set_cash(from._internal_cash());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void LoginAccess::CopyFrom(const LoginAccess& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.LoginAccess)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LoginAccess::IsInitialized() const {
  return true;
}

void LoginAccess::InternalSwap(LoginAccess* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  charater_.InternalSwap(&other->charater_);
  weaponlist_.InternalSwap(&other->weaponlist_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(LoginAccess, cash_)
      + sizeof(LoginAccess::cash_)
      - PROTOBUF_FIELD_OFFSET(LoginAccess, result_)>(
          reinterpret_cast<char*>(&result_),
          reinterpret_cast<char*>(&other->result_));
}

::PROTOBUF_NAMESPACE_ID::Metadata LoginAccess::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_GameService_2eproto_getter, &descriptor_table_GameService_2eproto_once,
      file_level_metadata_GameService_2eproto[4]);
}

// ===================================================================

class Charater::_Internal {
 public:
};

Charater::Charater(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:protocol.Charater)
}
Charater::Charater(const Charater& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArenaForAllocation());
  }
  ::memcpy(&uuid_, &from.uuid_,
    static_cast<size_t>(reinterpret_cast<char*>(&lv_) -
    reinterpret_cast<char*>(&uuid_)) + sizeof(lv_));
  // @@protoc_insertion_point(copy_constructor:protocol.Charater)
}

void Charater::SharedCtor() {
name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&uuid_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&lv_) -
    reinterpret_cast<char*>(&uuid_)) + sizeof(lv_));
}

Charater::~Charater() {
  // @@protoc_insertion_point(destructor:protocol.Charater)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Charater::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Charater::ArenaDtor(void* object) {
  Charater* _this = reinterpret_cast< Charater* >(object);
  (void)_this;
}
void Charater::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Charater::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Charater::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.Charater)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmpty();
  ::memset(&uuid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&lv_) -
      reinterpret_cast<char*>(&uuid_)) + sizeof(lv_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Charater::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 uuid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          uuid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 code = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          code_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string name = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "protocol.Charater.name"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 lv = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          lv_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Charater::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.Charater)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 uuid = 1;
  if (this->_internal_uuid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_uuid(), target);
  }

  // int32 code = 2;
  if (this->_internal_code() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_code(), target);
  }

  // string name = 3;
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "protocol.Charater.name");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_name(), target);
  }

  // int32 lv = 4;
  if (this->_internal_lv() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_lv(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.Charater)
  return target;
}

size_t Charater::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.Charater)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 3;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // int32 uuid = 1;
  if (this->_internal_uuid() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_uuid());
  }

  // int32 code = 2;
  if (this->_internal_code() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_code());
  }

  // int32 lv = 4;
  if (this->_internal_lv() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_lv());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Charater::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Charater::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Charater::GetClassData() const { return &_class_data_; }

void Charater::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Charater *>(to)->MergeFrom(
      static_cast<const Charater &>(from));
}


void Charater::MergeFrom(const Charater& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.Charater)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_name().empty()) {
    _internal_set_name(from._internal_name());
  }
  if (from._internal_uuid() != 0) {
    _internal_set_uuid(from._internal_uuid());
  }
  if (from._internal_code() != 0) {
    _internal_set_code(from._internal_code());
  }
  if (from._internal_lv() != 0) {
    _internal_set_lv(from._internal_lv());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Charater::CopyFrom(const Charater& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.Charater)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Charater::IsInitialized() const {
  return true;
}

void Charater::InternalSwap(Charater* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &name_, lhs_arena,
      &other->name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Charater, lv_)
      + sizeof(Charater::lv_)
      - PROTOBUF_FIELD_OFFSET(Charater, uuid_)>(
          reinterpret_cast<char*>(&uuid_),
          reinterpret_cast<char*>(&other->uuid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Charater::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_GameService_2eproto_getter, &descriptor_table_GameService_2eproto_once,
      file_level_metadata_GameService_2eproto[5]);
}

// ===================================================================

class Position::_Internal {
 public:
};

Position::Position(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:protocol.Position)
}
Position::Position(const Position& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&x_, &from.x_,
    static_cast<size_t>(reinterpret_cast<char*>(&yaw_) -
    reinterpret_cast<char*>(&x_)) + sizeof(yaw_));
  // @@protoc_insertion_point(copy_constructor:protocol.Position)
}

void Position::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&x_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&yaw_) -
    reinterpret_cast<char*>(&x_)) + sizeof(yaw_));
}

Position::~Position() {
  // @@protoc_insertion_point(destructor:protocol.Position)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Position::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Position::ArenaDtor(void* object) {
  Position* _this = reinterpret_cast< Position* >(object);
  (void)_this;
}
void Position::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Position::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Position::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.Position)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&yaw_) -
      reinterpret_cast<char*>(&x_)) + sizeof(yaw_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Position::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // float x = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float y = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float z = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          z_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float yaw = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37)) {
          yaw_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Position::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.Position)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float x = 1;
  if (!(this->_internal_x() <= 0 && this->_internal_x() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->_internal_x(), target);
  }

  // float y = 2;
  if (!(this->_internal_y() <= 0 && this->_internal_y() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_y(), target);
  }

  // float z = 3;
  if (!(this->_internal_z() <= 0 && this->_internal_z() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_z(), target);
  }

  // float yaw = 4;
  if (!(this->_internal_yaw() <= 0 && this->_internal_yaw() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(4, this->_internal_yaw(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.Position)
  return target;
}

size_t Position::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.Position)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // float x = 1;
  if (!(this->_internal_x() <= 0 && this->_internal_x() >= 0)) {
    total_size += 1 + 4;
  }

  // float y = 2;
  if (!(this->_internal_y() <= 0 && this->_internal_y() >= 0)) {
    total_size += 1 + 4;
  }

  // float z = 3;
  if (!(this->_internal_z() <= 0 && this->_internal_z() >= 0)) {
    total_size += 1 + 4;
  }

  // float yaw = 4;
  if (!(this->_internal_yaw() <= 0 && this->_internal_yaw() >= 0)) {
    total_size += 1 + 4;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Position::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Position::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Position::GetClassData() const { return &_class_data_; }

void Position::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Position *>(to)->MergeFrom(
      static_cast<const Position &>(from));
}


void Position::MergeFrom(const Position& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.Position)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from._internal_x() <= 0 && from._internal_x() >= 0)) {
    _internal_set_x(from._internal_x());
  }
  if (!(from._internal_y() <= 0 && from._internal_y() >= 0)) {
    _internal_set_y(from._internal_y());
  }
  if (!(from._internal_z() <= 0 && from._internal_z() >= 0)) {
    _internal_set_z(from._internal_z());
  }
  if (!(from._internal_yaw() <= 0 && from._internal_yaw() >= 0)) {
    _internal_set_yaw(from._internal_yaw());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Position::CopyFrom(const Position& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.Position)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Position::IsInitialized() const {
  return true;
}

void Position::InternalSwap(Position* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Position, yaw_)
      + sizeof(Position::yaw_)
      - PROTOBUF_FIELD_OFFSET(Position, x_)>(
          reinterpret_cast<char*>(&x_),
          reinterpret_cast<char*>(&other->x_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Position::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_GameService_2eproto_getter, &descriptor_table_GameService_2eproto_once,
      file_level_metadata_GameService_2eproto[6]);
}

// ===================================================================

class Unit::_Internal {
 public:
  static const ::protocol::Position& position(const Unit* msg);
};

const ::protocol::Position&
Unit::_Internal::position(const Unit* msg) {
  return *msg->position_;
}
Unit::Unit(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:protocol.Unit)
}
Unit::Unit(const Unit& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_position()) {
    position_ = new ::protocol::Position(*from.position_);
  } else {
    position_ = nullptr;
  }
  ::memcpy(&uuid_, &from.uuid_,
    static_cast<size_t>(reinterpret_cast<char*>(&weaponcode_) -
    reinterpret_cast<char*>(&uuid_)) + sizeof(weaponcode_));
  // @@protoc_insertion_point(copy_constructor:protocol.Unit)
}

void Unit::SharedCtor() {
name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&position_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&weaponcode_) -
    reinterpret_cast<char*>(&position_)) + sizeof(weaponcode_));
}

Unit::~Unit() {
  // @@protoc_insertion_point(destructor:protocol.Unit)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Unit::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete position_;
}

void Unit::ArenaDtor(void* object) {
  Unit* _this = reinterpret_cast< Unit* >(object);
  (void)_this;
}
void Unit::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Unit::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Unit::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.Unit)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && position_ != nullptr) {
    delete position_;
  }
  position_ = nullptr;
  ::memset(&uuid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&weaponcode_) -
      reinterpret_cast<char*>(&uuid_)) + sizeof(weaponcode_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Unit::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 uuid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          uuid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 hp = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          hp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 code = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          code_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .protocol.Position position = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_position(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string name = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "protocol.Unit.name"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 lv = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          lv_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 state = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          state_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 weaponCode = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          weaponcode_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Unit::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.Unit)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 uuid = 1;
  if (this->_internal_uuid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_uuid(), target);
  }

  // uint32 hp = 2;
  if (this->_internal_hp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_hp(), target);
  }

  // int32 code = 3;
  if (this->_internal_code() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_code(), target);
  }

  // .protocol.Position position = 4;
  if (this->_internal_has_position()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::position(this), target, stream);
  }

  // string name = 5;
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "protocol.Unit.name");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_name(), target);
  }

  // int32 lv = 6;
  if (this->_internal_lv() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(6, this->_internal_lv(), target);
  }

  // int32 state = 7;
  if (this->_internal_state() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(7, this->_internal_state(), target);
  }

  // int32 weaponCode = 8;
  if (this->_internal_weaponcode() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(8, this->_internal_weaponcode(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.Unit)
  return target;
}

size_t Unit::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.Unit)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 5;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // .protocol.Position position = 4;
  if (this->_internal_has_position()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *position_);
  }

  // uint32 uuid = 1;
  if (this->_internal_uuid() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_uuid());
  }

  // uint32 hp = 2;
  if (this->_internal_hp() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_hp());
  }

  // int32 code = 3;
  if (this->_internal_code() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_code());
  }

  // int32 lv = 6;
  if (this->_internal_lv() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_lv());
  }

  // int32 state = 7;
  if (this->_internal_state() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_state());
  }

  // int32 weaponCode = 8;
  if (this->_internal_weaponcode() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_weaponcode());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Unit::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Unit::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Unit::GetClassData() const { return &_class_data_; }

void Unit::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Unit *>(to)->MergeFrom(
      static_cast<const Unit &>(from));
}


void Unit::MergeFrom(const Unit& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.Unit)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_name().empty()) {
    _internal_set_name(from._internal_name());
  }
  if (from._internal_has_position()) {
    _internal_mutable_position()->::protocol::Position::MergeFrom(from._internal_position());
  }
  if (from._internal_uuid() != 0) {
    _internal_set_uuid(from._internal_uuid());
  }
  if (from._internal_hp() != 0) {
    _internal_set_hp(from._internal_hp());
  }
  if (from._internal_code() != 0) {
    _internal_set_code(from._internal_code());
  }
  if (from._internal_lv() != 0) {
    _internal_set_lv(from._internal_lv());
  }
  if (from._internal_state() != 0) {
    _internal_set_state(from._internal_state());
  }
  if (from._internal_weaponcode() != 0) {
    _internal_set_weaponcode(from._internal_weaponcode());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Unit::CopyFrom(const Unit& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.Unit)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Unit::IsInitialized() const {
  return true;
}

void Unit::InternalSwap(Unit* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &name_, lhs_arena,
      &other->name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Unit, weaponcode_)
      + sizeof(Unit::weaponcode_)
      - PROTOBUF_FIELD_OFFSET(Unit, position_)>(
          reinterpret_cast<char*>(&position_),
          reinterpret_cast<char*>(&other->position_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Unit::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_GameService_2eproto_getter, &descriptor_table_GameService_2eproto_once,
      file_level_metadata_GameService_2eproto[7]);
}

// ===================================================================

class SLoad::_Internal {
 public:
};

SLoad::SLoad(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  unit_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:protocol.SLoad)
}
SLoad::SLoad(const SLoad& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      unit_(from.unit_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  room_id_ = from.room_id_;
  // @@protoc_insertion_point(copy_constructor:protocol.SLoad)
}

void SLoad::SharedCtor() {
room_id_ = 0;
}

SLoad::~SLoad() {
  // @@protoc_insertion_point(destructor:protocol.SLoad)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SLoad::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void SLoad::ArenaDtor(void* object) {
  SLoad* _this = reinterpret_cast< SLoad* >(object);
  (void)_this;
}
void SLoad::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SLoad::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SLoad::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.SLoad)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  unit_.Clear();
  room_id_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SLoad::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .protocol.UnitState unit = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_unit(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // int32 room_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          room_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SLoad::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.SLoad)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .protocol.UnitState unit = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_unit_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_unit(i), target, stream);
  }

  // int32 room_id = 3;
  if (this->_internal_room_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_room_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.SLoad)
  return target;
}

size_t SLoad::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.SLoad)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .protocol.UnitState unit = 1;
  total_size += 1UL * this->_internal_unit_size();
  for (const auto& msg : this->unit_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // int32 room_id = 3;
  if (this->_internal_room_id() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_room_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SLoad::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SLoad::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SLoad::GetClassData() const { return &_class_data_; }

void SLoad::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SLoad *>(to)->MergeFrom(
      static_cast<const SLoad &>(from));
}


void SLoad::MergeFrom(const SLoad& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.SLoad)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  unit_.MergeFrom(from.unit_);
  if (from._internal_room_id() != 0) {
    _internal_set_room_id(from._internal_room_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SLoad::CopyFrom(const SLoad& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.SLoad)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SLoad::IsInitialized() const {
  return true;
}

void SLoad::InternalSwap(SLoad* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  unit_.InternalSwap(&other->unit_);
  swap(room_id_, other->room_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SLoad::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_GameService_2eproto_getter, &descriptor_table_GameService_2eproto_once,
      file_level_metadata_GameService_2eproto[8]);
}

// ===================================================================

class CLoad::_Internal {
 public:
  static const ::protocol::Position& position(const CLoad* msg);
};

const ::protocol::Position&
CLoad::_Internal::position(const CLoad* msg) {
  return *msg->position_;
}
CLoad::CLoad(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:protocol.CLoad)
}
CLoad::CLoad(const CLoad& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_position()) {
    position_ = new ::protocol::Position(*from.position_);
  } else {
    position_ = nullptr;
  }
  uuid_ = from.uuid_;
  // @@protoc_insertion_point(copy_constructor:protocol.CLoad)
}

void CLoad::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&position_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&uuid_) -
    reinterpret_cast<char*>(&position_)) + sizeof(uuid_));
}

CLoad::~CLoad() {
  // @@protoc_insertion_point(destructor:protocol.CLoad)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CLoad::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete position_;
}

void CLoad::ArenaDtor(void* object) {
  CLoad* _this = reinterpret_cast< CLoad* >(object);
  (void)_this;
}
void CLoad::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CLoad::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CLoad::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.CLoad)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && position_ != nullptr) {
    delete position_;
  }
  position_ = nullptr;
  uuid_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CLoad::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 uuid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          uuid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .protocol.Position position = 100;
      case 100:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_position(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CLoad::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.CLoad)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 uuid = 1;
  if (this->_internal_uuid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_uuid(), target);
  }

  // .protocol.Position position = 100;
  if (this->_internal_has_position()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        100, _Internal::position(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.CLoad)
  return target;
}

size_t CLoad::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.CLoad)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .protocol.Position position = 100;
  if (this->_internal_has_position()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *position_);
  }

  // int32 uuid = 1;
  if (this->_internal_uuid() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_uuid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CLoad::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CLoad::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CLoad::GetClassData() const { return &_class_data_; }

void CLoad::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CLoad *>(to)->MergeFrom(
      static_cast<const CLoad &>(from));
}


void CLoad::MergeFrom(const CLoad& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.CLoad)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_position()) {
    _internal_mutable_position()->::protocol::Position::MergeFrom(from._internal_position());
  }
  if (from._internal_uuid() != 0) {
    _internal_set_uuid(from._internal_uuid());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CLoad::CopyFrom(const CLoad& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.CLoad)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CLoad::IsInitialized() const {
  return true;
}

void CLoad::InternalSwap(CLoad* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CLoad, uuid_)
      + sizeof(CLoad::uuid_)
      - PROTOBUF_FIELD_OFFSET(CLoad, position_)>(
          reinterpret_cast<char*>(&position_),
          reinterpret_cast<char*>(&other->position_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CLoad::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_GameService_2eproto_getter, &descriptor_table_GameService_2eproto_once,
      file_level_metadata_GameService_2eproto[9]);
}

// ===================================================================

class SInsertplayer::_Internal {
 public:
  static const ::protocol::Unit& player(const SInsertplayer* msg);
};

const ::protocol::Unit&
SInsertplayer::_Internal::player(const SInsertplayer* msg) {
  return *msg->player_;
}
SInsertplayer::SInsertplayer(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:protocol.SInsertplayer)
}
SInsertplayer::SInsertplayer(const SInsertplayer& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_player()) {
    player_ = new ::protocol::Unit(*from.player_);
  } else {
    player_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:protocol.SInsertplayer)
}

void SInsertplayer::SharedCtor() {
player_ = nullptr;
}

SInsertplayer::~SInsertplayer() {
  // @@protoc_insertion_point(destructor:protocol.SInsertplayer)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SInsertplayer::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete player_;
}

void SInsertplayer::ArenaDtor(void* object) {
  SInsertplayer* _this = reinterpret_cast< SInsertplayer* >(object);
  (void)_this;
}
void SInsertplayer::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SInsertplayer::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SInsertplayer::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.SInsertplayer)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && player_ != nullptr) {
    delete player_;
  }
  player_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SInsertplayer::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .protocol.Unit player = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_player(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SInsertplayer::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.SInsertplayer)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .protocol.Unit player = 1;
  if (this->_internal_has_player()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::player(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.SInsertplayer)
  return target;
}

size_t SInsertplayer::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.SInsertplayer)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .protocol.Unit player = 1;
  if (this->_internal_has_player()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *player_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SInsertplayer::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SInsertplayer::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SInsertplayer::GetClassData() const { return &_class_data_; }

void SInsertplayer::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SInsertplayer *>(to)->MergeFrom(
      static_cast<const SInsertplayer &>(from));
}


void SInsertplayer::MergeFrom(const SInsertplayer& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.SInsertplayer)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_player()) {
    _internal_mutable_player()->::protocol::Unit::MergeFrom(from._internal_player());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SInsertplayer::CopyFrom(const SInsertplayer& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.SInsertplayer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SInsertplayer::IsInitialized() const {
  return true;
}

void SInsertplayer::InternalSwap(SInsertplayer* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(player_, other->player_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SInsertplayer::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_GameService_2eproto_getter, &descriptor_table_GameService_2eproto_once,
      file_level_metadata_GameService_2eproto[10]);
}

// ===================================================================

class SMove::_Internal {
 public:
  static const ::protocol::Position& position(const SMove* msg);
};

const ::protocol::Position&
SMove::_Internal::position(const SMove* msg) {
  return *msg->position_;
}
SMove::SMove(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:protocol.SMove)
}
SMove::SMove(const SMove& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_position()) {
    position_ = new ::protocol::Position(*from.position_);
  } else {
    position_ = nullptr;
  }
  ::memcpy(&uuid_, &from.uuid_,
    static_cast<size_t>(reinterpret_cast<char*>(&is_monster_) -
    reinterpret_cast<char*>(&uuid_)) + sizeof(is_monster_));
  // @@protoc_insertion_point(copy_constructor:protocol.SMove)
}

void SMove::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&position_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&is_monster_) -
    reinterpret_cast<char*>(&position_)) + sizeof(is_monster_));
}

SMove::~SMove() {
  // @@protoc_insertion_point(destructor:protocol.SMove)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SMove::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete position_;
}

void SMove::ArenaDtor(void* object) {
  SMove* _this = reinterpret_cast< SMove* >(object);
  (void)_this;
}
void SMove::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SMove::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SMove::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.SMove)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && position_ != nullptr) {
    delete position_;
  }
  position_ = nullptr;
  ::memset(&uuid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&is_monster_) -
      reinterpret_cast<char*>(&uuid_)) + sizeof(is_monster_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SMove::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 uuid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          uuid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .protocol.Position position = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_position(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool is_monster = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          is_monster_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SMove::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.SMove)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 uuid = 1;
  if (this->_internal_uuid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_uuid(), target);
  }

  // .protocol.Position position = 2;
  if (this->_internal_has_position()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::position(this), target, stream);
  }

  // bool is_monster = 3;
  if (this->_internal_is_monster() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_is_monster(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.SMove)
  return target;
}

size_t SMove::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.SMove)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .protocol.Position position = 2;
  if (this->_internal_has_position()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *position_);
  }

  // int32 uuid = 1;
  if (this->_internal_uuid() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_uuid());
  }

  // bool is_monster = 3;
  if (this->_internal_is_monster() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SMove::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SMove::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SMove::GetClassData() const { return &_class_data_; }

void SMove::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SMove *>(to)->MergeFrom(
      static_cast<const SMove &>(from));
}


void SMove::MergeFrom(const SMove& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.SMove)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_position()) {
    _internal_mutable_position()->::protocol::Position::MergeFrom(from._internal_position());
  }
  if (from._internal_uuid() != 0) {
    _internal_set_uuid(from._internal_uuid());
  }
  if (from._internal_is_monster() != 0) {
    _internal_set_is_monster(from._internal_is_monster());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SMove::CopyFrom(const SMove& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.SMove)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SMove::IsInitialized() const {
  return true;
}

void SMove::InternalSwap(SMove* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SMove, is_monster_)
      + sizeof(SMove::is_monster_)
      - PROTOBUF_FIELD_OFFSET(SMove, position_)>(
          reinterpret_cast<char*>(&position_),
          reinterpret_cast<char*>(&other->position_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SMove::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_GameService_2eproto_getter, &descriptor_table_GameService_2eproto_once,
      file_level_metadata_GameService_2eproto[11]);
}

// ===================================================================

class SChat::_Internal {
 public:
};

SChat::SChat(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:protocol.SChat)
}
SChat::SChat(const SChat& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  text_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_text().empty()) {
    text_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_text(), 
      GetArenaForAllocation());
  }
  ::memcpy(&type_, &from.type_,
    static_cast<size_t>(reinterpret_cast<char*>(&uuid_) -
    reinterpret_cast<char*>(&type_)) + sizeof(uuid_));
  // @@protoc_insertion_point(copy_constructor:protocol.SChat)
}

void SChat::SharedCtor() {
text_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&type_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&uuid_) -
    reinterpret_cast<char*>(&type_)) + sizeof(uuid_));
}

SChat::~SChat() {
  // @@protoc_insertion_point(destructor:protocol.SChat)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SChat::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  text_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void SChat::ArenaDtor(void* object) {
  SChat* _this = reinterpret_cast< SChat* >(object);
  (void)_this;
}
void SChat::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SChat::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SChat::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.SChat)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  text_.ClearToEmpty();
  ::memset(&type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&uuid_) -
      reinterpret_cast<char*>(&type_)) + sizeof(uuid_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SChat::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 uuid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          uuid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string text = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_text();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "protocol.SChat.text"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SChat::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.SChat)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 type = 1;
  if (this->_internal_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_type(), target);
  }

  // int32 uuid = 2;
  if (this->_internal_uuid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_uuid(), target);
  }

  // string text = 5;
  if (!this->_internal_text().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_text().data(), static_cast<int>(this->_internal_text().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "protocol.SChat.text");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_text(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.SChat)
  return target;
}

size_t SChat::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.SChat)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string text = 5;
  if (!this->_internal_text().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_text());
  }

  // uint32 type = 1;
  if (this->_internal_type() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_type());
  }

  // int32 uuid = 2;
  if (this->_internal_uuid() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_uuid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SChat::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SChat::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SChat::GetClassData() const { return &_class_data_; }

void SChat::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SChat *>(to)->MergeFrom(
      static_cast<const SChat &>(from));
}


void SChat::MergeFrom(const SChat& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.SChat)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_text().empty()) {
    _internal_set_text(from._internal_text());
  }
  if (from._internal_type() != 0) {
    _internal_set_type(from._internal_type());
  }
  if (from._internal_uuid() != 0) {
    _internal_set_uuid(from._internal_uuid());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SChat::CopyFrom(const SChat& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.SChat)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SChat::IsInitialized() const {
  return true;
}

void SChat::InternalSwap(SChat* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &text_, lhs_arena,
      &other->text_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SChat, uuid_)
      + sizeof(SChat::uuid_)
      - PROTOBUF_FIELD_OFFSET(SChat, type_)>(
          reinterpret_cast<char*>(&type_),
          reinterpret_cast<char*>(&other->type_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SChat::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_GameService_2eproto_getter, &descriptor_table_GameService_2eproto_once,
      file_level_metadata_GameService_2eproto[12]);
}

// ===================================================================

class SPlayerData::_Internal {
 public:
  static const ::protocol::Unit& player(const SPlayerData* msg);
};

const ::protocol::Unit&
SPlayerData::_Internal::player(const SPlayerData* msg) {
  return *msg->player_;
}
SPlayerData::SPlayerData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:protocol.SPlayerData)
}
SPlayerData::SPlayerData(const SPlayerData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_player()) {
    player_ = new ::protocol::Unit(*from.player_);
  } else {
    player_ = nullptr;
  }
  exp_ = from.exp_;
  // @@protoc_insertion_point(copy_constructor:protocol.SPlayerData)
}

void SPlayerData::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&player_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&exp_) -
    reinterpret_cast<char*>(&player_)) + sizeof(exp_));
}

SPlayerData::~SPlayerData() {
  // @@protoc_insertion_point(destructor:protocol.SPlayerData)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SPlayerData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete player_;
}

void SPlayerData::ArenaDtor(void* object) {
  SPlayerData* _this = reinterpret_cast< SPlayerData* >(object);
  (void)_this;
}
void SPlayerData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SPlayerData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SPlayerData::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.SPlayerData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && player_ != nullptr) {
    delete player_;
  }
  player_ = nullptr;
  exp_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SPlayerData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .protocol.Unit player = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_player(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 exp = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          exp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SPlayerData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.SPlayerData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .protocol.Unit player = 1;
  if (this->_internal_has_player()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::player(this), target, stream);
  }

  // int32 exp = 2;
  if (this->_internal_exp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_exp(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.SPlayerData)
  return target;
}

size_t SPlayerData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.SPlayerData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .protocol.Unit player = 1;
  if (this->_internal_has_player()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *player_);
  }

  // int32 exp = 2;
  if (this->_internal_exp() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_exp());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SPlayerData::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SPlayerData::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SPlayerData::GetClassData() const { return &_class_data_; }

void SPlayerData::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SPlayerData *>(to)->MergeFrom(
      static_cast<const SPlayerData &>(from));
}


void SPlayerData::MergeFrom(const SPlayerData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.SPlayerData)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_player()) {
    _internal_mutable_player()->::protocol::Unit::MergeFrom(from._internal_player());
  }
  if (from._internal_exp() != 0) {
    _internal_set_exp(from._internal_exp());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SPlayerData::CopyFrom(const SPlayerData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.SPlayerData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SPlayerData::IsInitialized() const {
  return true;
}

void SPlayerData::InternalSwap(SPlayerData* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SPlayerData, exp_)
      + sizeof(SPlayerData::exp_)
      - PROTOBUF_FIELD_OFFSET(SPlayerData, player_)>(
          reinterpret_cast<char*>(&player_),
          reinterpret_cast<char*>(&other->player_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SPlayerData::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_GameService_2eproto_getter, &descriptor_table_GameService_2eproto_once,
      file_level_metadata_GameService_2eproto[13]);
}

// ===================================================================

class SClosePlayer::_Internal {
 public:
};

SClosePlayer::SClosePlayer(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:protocol.SClosePlayer)
}
SClosePlayer::SClosePlayer(const SClosePlayer& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  uuid_ = from.uuid_;
  // @@protoc_insertion_point(copy_constructor:protocol.SClosePlayer)
}

void SClosePlayer::SharedCtor() {
uuid_ = 0;
}

SClosePlayer::~SClosePlayer() {
  // @@protoc_insertion_point(destructor:protocol.SClosePlayer)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SClosePlayer::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void SClosePlayer::ArenaDtor(void* object) {
  SClosePlayer* _this = reinterpret_cast< SClosePlayer* >(object);
  (void)_this;
}
void SClosePlayer::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SClosePlayer::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SClosePlayer::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.SClosePlayer)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  uuid_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SClosePlayer::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 uuid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          uuid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SClosePlayer::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.SClosePlayer)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 uuid = 1;
  if (this->_internal_uuid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_uuid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.SClosePlayer)
  return target;
}

size_t SClosePlayer::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.SClosePlayer)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 uuid = 1;
  if (this->_internal_uuid() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_uuid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SClosePlayer::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SClosePlayer::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SClosePlayer::GetClassData() const { return &_class_data_; }

void SClosePlayer::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SClosePlayer *>(to)->MergeFrom(
      static_cast<const SClosePlayer &>(from));
}


void SClosePlayer::MergeFrom(const SClosePlayer& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.SClosePlayer)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_uuid() != 0) {
    _internal_set_uuid(from._internal_uuid());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SClosePlayer::CopyFrom(const SClosePlayer& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.SClosePlayer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SClosePlayer::IsInitialized() const {
  return true;
}

void SClosePlayer::InternalSwap(SClosePlayer* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(uuid_, other->uuid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SClosePlayer::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_GameService_2eproto_getter, &descriptor_table_GameService_2eproto_once,
      file_level_metadata_GameService_2eproto[14]);
}

// ===================================================================

class UnitState::_Internal {
 public:
  static const ::protocol::Unit& unit(const UnitState* msg);
  static const ::protocol::Attack& attack(const UnitState* msg);
};

const ::protocol::Unit&
UnitState::_Internal::unit(const UnitState* msg) {
  return *msg->unit_;
}
const ::protocol::Attack&
UnitState::_Internal::attack(const UnitState* msg) {
  return *msg->attack_;
}
UnitState::UnitState(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:protocol.UnitState)
}
UnitState::UnitState(const UnitState& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_unit()) {
    unit_ = new ::protocol::Unit(*from.unit_);
  } else {
    unit_ = nullptr;
  }
  if (from._internal_has_attack()) {
    attack_ = new ::protocol::Attack(*from.attack_);
  } else {
    attack_ = nullptr;
  }
  is_monster_ = from.is_monster_;
  // @@protoc_insertion_point(copy_constructor:protocol.UnitState)
}

void UnitState::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&unit_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&is_monster_) -
    reinterpret_cast<char*>(&unit_)) + sizeof(is_monster_));
}

UnitState::~UnitState() {
  // @@protoc_insertion_point(destructor:protocol.UnitState)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void UnitState::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete unit_;
  if (this != internal_default_instance()) delete attack_;
}

void UnitState::ArenaDtor(void* object) {
  UnitState* _this = reinterpret_cast< UnitState* >(object);
  (void)_this;
}
void UnitState::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void UnitState::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void UnitState::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.UnitState)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && unit_ != nullptr) {
    delete unit_;
  }
  unit_ = nullptr;
  if (GetArenaForAllocation() == nullptr && attack_ != nullptr) {
    delete attack_;
  }
  attack_ = nullptr;
  is_monster_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UnitState::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .protocol.Unit unit = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_unit(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool is_monster = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          is_monster_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .protocol.Attack attack = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_attack(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* UnitState::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.UnitState)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .protocol.Unit unit = 1;
  if (this->_internal_has_unit()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::unit(this), target, stream);
  }

  // bool is_monster = 10;
  if (this->_internal_is_monster() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(10, this->_internal_is_monster(), target);
  }

  // .protocol.Attack attack = 11;
  if (this->_internal_has_attack()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        11, _Internal::attack(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.UnitState)
  return target;
}

size_t UnitState::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.UnitState)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .protocol.Unit unit = 1;
  if (this->_internal_has_unit()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *unit_);
  }

  // .protocol.Attack attack = 11;
  if (this->_internal_has_attack()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *attack_);
  }

  // bool is_monster = 10;
  if (this->_internal_is_monster() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData UnitState::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    UnitState::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*UnitState::GetClassData() const { return &_class_data_; }

void UnitState::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<UnitState *>(to)->MergeFrom(
      static_cast<const UnitState &>(from));
}


void UnitState::MergeFrom(const UnitState& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.UnitState)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_unit()) {
    _internal_mutable_unit()->::protocol::Unit::MergeFrom(from._internal_unit());
  }
  if (from._internal_has_attack()) {
    _internal_mutable_attack()->::protocol::Attack::MergeFrom(from._internal_attack());
  }
  if (from._internal_is_monster() != 0) {
    _internal_set_is_monster(from._internal_is_monster());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void UnitState::CopyFrom(const UnitState& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.UnitState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UnitState::IsInitialized() const {
  return true;
}

void UnitState::InternalSwap(UnitState* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(UnitState, is_monster_)
      + sizeof(UnitState::is_monster_)
      - PROTOBUF_FIELD_OFFSET(UnitState, unit_)>(
          reinterpret_cast<char*>(&unit_),
          reinterpret_cast<char*>(&other->unit_));
}

::PROTOBUF_NAMESPACE_ID::Metadata UnitState::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_GameService_2eproto_getter, &descriptor_table_GameService_2eproto_once,
      file_level_metadata_GameService_2eproto[15]);
}

// ===================================================================

class SUnitStates::_Internal {
 public:
};

SUnitStates::SUnitStates(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  unit_state_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:protocol.SUnitStates)
}
SUnitStates::SUnitStates(const SUnitStates& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      unit_state_(from.unit_state_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:protocol.SUnitStates)
}

void SUnitStates::SharedCtor() {
}

SUnitStates::~SUnitStates() {
  // @@protoc_insertion_point(destructor:protocol.SUnitStates)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SUnitStates::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void SUnitStates::ArenaDtor(void* object) {
  SUnitStates* _this = reinterpret_cast< SUnitStates* >(object);
  (void)_this;
}
void SUnitStates::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SUnitStates::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SUnitStates::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.SUnitStates)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  unit_state_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SUnitStates::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .protocol.UnitState unit_state = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_unit_state(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SUnitStates::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.SUnitStates)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .protocol.UnitState unit_state = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_unit_state_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_unit_state(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.SUnitStates)
  return target;
}

size_t SUnitStates::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.SUnitStates)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .protocol.UnitState unit_state = 1;
  total_size += 1UL * this->_internal_unit_state_size();
  for (const auto& msg : this->unit_state_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SUnitStates::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SUnitStates::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SUnitStates::GetClassData() const { return &_class_data_; }

void SUnitStates::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SUnitStates *>(to)->MergeFrom(
      static_cast<const SUnitStates &>(from));
}


void SUnitStates::MergeFrom(const SUnitStates& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.SUnitStates)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  unit_state_.MergeFrom(from.unit_state_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SUnitStates::CopyFrom(const SUnitStates& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.SUnitStates)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SUnitStates::IsInitialized() const {
  return true;
}

void SUnitStates::InternalSwap(SUnitStates* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  unit_state_.InternalSwap(&other->unit_state_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SUnitStates::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_GameService_2eproto_getter, &descriptor_table_GameService_2eproto_once,
      file_level_metadata_GameService_2eproto[16]);
}

// ===================================================================

class Attack::_Internal {
 public:
};

Attack::Attack(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:protocol.Attack)
}
Attack::Attack(const Attack& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&uuid_, &from.uuid_,
    static_cast<size_t>(reinterpret_cast<char*>(&target_uuid_) -
    reinterpret_cast<char*>(&uuid_)) + sizeof(target_uuid_));
  // @@protoc_insertion_point(copy_constructor:protocol.Attack)
}

void Attack::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&uuid_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&target_uuid_) -
    reinterpret_cast<char*>(&uuid_)) + sizeof(target_uuid_));
}

Attack::~Attack() {
  // @@protoc_insertion_point(destructor:protocol.Attack)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Attack::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Attack::ArenaDtor(void* object) {
  Attack* _this = reinterpret_cast< Attack* >(object);
  (void)_this;
}
void Attack::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Attack::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Attack::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.Attack)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&uuid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&target_uuid_) -
      reinterpret_cast<char*>(&uuid_)) + sizeof(target_uuid_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Attack::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 uuid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          uuid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 skill_code = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          skill_code_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 target_uuid = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          target_uuid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Attack::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.Attack)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 uuid = 1;
  if (this->_internal_uuid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_uuid(), target);
  }

  // int32 skill_code = 2;
  if (this->_internal_skill_code() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_skill_code(), target);
  }

  // int32 target_uuid = 3;
  if (this->_internal_target_uuid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_target_uuid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.Attack)
  return target;
}

size_t Attack::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.Attack)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 uuid = 1;
  if (this->_internal_uuid() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_uuid());
  }

  // int32 skill_code = 2;
  if (this->_internal_skill_code() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_skill_code());
  }

  // int32 target_uuid = 3;
  if (this->_internal_target_uuid() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_target_uuid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Attack::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Attack::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Attack::GetClassData() const { return &_class_data_; }

void Attack::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Attack *>(to)->MergeFrom(
      static_cast<const Attack &>(from));
}


void Attack::MergeFrom(const Attack& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.Attack)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_uuid() != 0) {
    _internal_set_uuid(from._internal_uuid());
  }
  if (from._internal_skill_code() != 0) {
    _internal_set_skill_code(from._internal_skill_code());
  }
  if (from._internal_target_uuid() != 0) {
    _internal_set_target_uuid(from._internal_target_uuid());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Attack::CopyFrom(const Attack& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.Attack)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Attack::IsInitialized() const {
  return true;
}

void Attack::InternalSwap(Attack* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Attack, target_uuid_)
      + sizeof(Attack::target_uuid_)
      - PROTOBUF_FIELD_OFFSET(Attack, uuid_)>(
          reinterpret_cast<char*>(&uuid_),
          reinterpret_cast<char*>(&other->uuid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Attack::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_GameService_2eproto_getter, &descriptor_table_GameService_2eproto_once,
      file_level_metadata_GameService_2eproto[17]);
}

// ===================================================================

class CAttack::_Internal {
 public:
  static const ::protocol::Position& position(const CAttack* msg);
};

const ::protocol::Position&
CAttack::_Internal::position(const CAttack* msg) {
  return *msg->position_;
}
CAttack::CAttack(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:protocol.CAttack)
}
CAttack::CAttack(const CAttack& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_position()) {
    position_ = new ::protocol::Position(*from.position_);
  } else {
    position_ = nullptr;
  }
  ::memcpy(&uuid_, &from.uuid_,
    static_cast<size_t>(reinterpret_cast<char*>(&target_uuid_) -
    reinterpret_cast<char*>(&uuid_)) + sizeof(target_uuid_));
  // @@protoc_insertion_point(copy_constructor:protocol.CAttack)
}

void CAttack::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&position_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&target_uuid_) -
    reinterpret_cast<char*>(&position_)) + sizeof(target_uuid_));
}

CAttack::~CAttack() {
  // @@protoc_insertion_point(destructor:protocol.CAttack)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CAttack::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete position_;
}

void CAttack::ArenaDtor(void* object) {
  CAttack* _this = reinterpret_cast< CAttack* >(object);
  (void)_this;
}
void CAttack::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CAttack::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CAttack::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.CAttack)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && position_ != nullptr) {
    delete position_;
  }
  position_ = nullptr;
  ::memset(&uuid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&target_uuid_) -
      reinterpret_cast<char*>(&uuid_)) + sizeof(target_uuid_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CAttack::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 uuid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          uuid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 skill_code = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          skill_code_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 target_uuid = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          target_uuid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .protocol.Position position = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_position(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CAttack::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.CAttack)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 uuid = 1;
  if (this->_internal_uuid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_uuid(), target);
  }

  // int32 skill_code = 2;
  if (this->_internal_skill_code() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_skill_code(), target);
  }

  // int32 target_uuid = 3;
  if (this->_internal_target_uuid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_target_uuid(), target);
  }

  // .protocol.Position position = 4;
  if (this->_internal_has_position()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::position(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.CAttack)
  return target;
}

size_t CAttack::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.CAttack)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .protocol.Position position = 4;
  if (this->_internal_has_position()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *position_);
  }

  // int32 uuid = 1;
  if (this->_internal_uuid() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_uuid());
  }

  // int32 skill_code = 2;
  if (this->_internal_skill_code() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_skill_code());
  }

  // int32 target_uuid = 3;
  if (this->_internal_target_uuid() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_target_uuid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CAttack::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CAttack::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CAttack::GetClassData() const { return &_class_data_; }

void CAttack::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CAttack *>(to)->MergeFrom(
      static_cast<const CAttack &>(from));
}


void CAttack::MergeFrom(const CAttack& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.CAttack)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_position()) {
    _internal_mutable_position()->::protocol::Position::MergeFrom(from._internal_position());
  }
  if (from._internal_uuid() != 0) {
    _internal_set_uuid(from._internal_uuid());
  }
  if (from._internal_skill_code() != 0) {
    _internal_set_skill_code(from._internal_skill_code());
  }
  if (from._internal_target_uuid() != 0) {
    _internal_set_target_uuid(from._internal_target_uuid());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CAttack::CopyFrom(const CAttack& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.CAttack)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CAttack::IsInitialized() const {
  return true;
}

void CAttack::InternalSwap(CAttack* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CAttack, target_uuid_)
      + sizeof(CAttack::target_uuid_)
      - PROTOBUF_FIELD_OFFSET(CAttack, position_)>(
          reinterpret_cast<char*>(&position_),
          reinterpret_cast<char*>(&other->position_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CAttack::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_GameService_2eproto_getter, &descriptor_table_GameService_2eproto_once,
      file_level_metadata_GameService_2eproto[18]);
}

// ===================================================================

class Demage::_Internal {
 public:
  static const ::protocol::Position& position(const Demage* msg);
};

const ::protocol::Position&
Demage::_Internal::position(const Demage* msg) {
  return *msg->position_;
}
Demage::Demage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:protocol.Demage)
}
Demage::Demage(const Demage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_position()) {
    position_ = new ::protocol::Position(*from.position_);
  } else {
    position_ = nullptr;
  }
  ::memcpy(&uuid_, &from.uuid_,
    static_cast<size_t>(reinterpret_cast<char*>(&is_monster_) -
    reinterpret_cast<char*>(&uuid_)) + sizeof(is_monster_));
  // @@protoc_insertion_point(copy_constructor:protocol.Demage)
}

void Demage::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&position_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&is_monster_) -
    reinterpret_cast<char*>(&position_)) + sizeof(is_monster_));
}

Demage::~Demage() {
  // @@protoc_insertion_point(destructor:protocol.Demage)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Demage::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete position_;
}

void Demage::ArenaDtor(void* object) {
  Demage* _this = reinterpret_cast< Demage* >(object);
  (void)_this;
}
void Demage::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Demage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Demage::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.Demage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && position_ != nullptr) {
    delete position_;
  }
  position_ = nullptr;
  ::memset(&uuid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&is_monster_) -
      reinterpret_cast<char*>(&uuid_)) + sizeof(is_monster_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Demage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 uuid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          uuid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 demage = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          demage_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .protocol.Position position = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_position(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool is_heal = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          is_heal_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool is_monster = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          is_monster_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Demage::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.Demage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 uuid = 1;
  if (this->_internal_uuid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_uuid(), target);
  }

  // int32 demage = 2;
  if (this->_internal_demage() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_demage(), target);
  }

  // .protocol.Position position = 3;
  if (this->_internal_has_position()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::position(this), target, stream);
  }

  // bool is_heal = 4;
  if (this->_internal_is_heal() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_is_heal(), target);
  }

  // bool is_monster = 10;
  if (this->_internal_is_monster() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(10, this->_internal_is_monster(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.Demage)
  return target;
}

size_t Demage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.Demage)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .protocol.Position position = 3;
  if (this->_internal_has_position()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *position_);
  }

  // int32 uuid = 1;
  if (this->_internal_uuid() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_uuid());
  }

  // int32 demage = 2;
  if (this->_internal_demage() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_demage());
  }

  // bool is_heal = 4;
  if (this->_internal_is_heal() != 0) {
    total_size += 1 + 1;
  }

  // bool is_monster = 10;
  if (this->_internal_is_monster() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Demage::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Demage::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Demage::GetClassData() const { return &_class_data_; }

void Demage::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Demage *>(to)->MergeFrom(
      static_cast<const Demage &>(from));
}


void Demage::MergeFrom(const Demage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.Demage)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_position()) {
    _internal_mutable_position()->::protocol::Position::MergeFrom(from._internal_position());
  }
  if (from._internal_uuid() != 0) {
    _internal_set_uuid(from._internal_uuid());
  }
  if (from._internal_demage() != 0) {
    _internal_set_demage(from._internal_demage());
  }
  if (from._internal_is_heal() != 0) {
    _internal_set_is_heal(from._internal_is_heal());
  }
  if (from._internal_is_monster() != 0) {
    _internal_set_is_monster(from._internal_is_monster());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Demage::CopyFrom(const Demage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.Demage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Demage::IsInitialized() const {
  return true;
}

void Demage::InternalSwap(Demage* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Demage, is_monster_)
      + sizeof(Demage::is_monster_)
      - PROTOBUF_FIELD_OFFSET(Demage, position_)>(
          reinterpret_cast<char*>(&position_),
          reinterpret_cast<char*>(&other->position_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Demage::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_GameService_2eproto_getter, &descriptor_table_GameService_2eproto_once,
      file_level_metadata_GameService_2eproto[19]);
}

// ===================================================================

class SUnitDemage::_Internal {
 public:
};

SUnitDemage::SUnitDemage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  demage_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:protocol.SUnitDemage)
}
SUnitDemage::SUnitDemage(const SUnitDemage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      demage_(from.demage_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&uuid_, &from.uuid_,
    static_cast<size_t>(reinterpret_cast<char*>(&is_monster_) -
    reinterpret_cast<char*>(&uuid_)) + sizeof(is_monster_));
  // @@protoc_insertion_point(copy_constructor:protocol.SUnitDemage)
}

void SUnitDemage::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&uuid_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&is_monster_) -
    reinterpret_cast<char*>(&uuid_)) + sizeof(is_monster_));
}

SUnitDemage::~SUnitDemage() {
  // @@protoc_insertion_point(destructor:protocol.SUnitDemage)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SUnitDemage::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void SUnitDemage::ArenaDtor(void* object) {
  SUnitDemage* _this = reinterpret_cast< SUnitDemage* >(object);
  (void)_this;
}
void SUnitDemage::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SUnitDemage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SUnitDemage::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.SUnitDemage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  demage_.Clear();
  ::memset(&uuid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&is_monster_) -
      reinterpret_cast<char*>(&uuid_)) + sizeof(is_monster_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SUnitDemage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 uuid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          uuid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool is_monster = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          is_monster_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .protocol.Demage demage = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_demage(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SUnitDemage::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.SUnitDemage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 uuid = 1;
  if (this->_internal_uuid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_uuid(), target);
  }

  // bool is_monster = 2;
  if (this->_internal_is_monster() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_is_monster(), target);
  }

  // repeated .protocol.Demage demage = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_demage_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_demage(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.SUnitDemage)
  return target;
}

size_t SUnitDemage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.SUnitDemage)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .protocol.Demage demage = 3;
  total_size += 1UL * this->_internal_demage_size();
  for (const auto& msg : this->demage_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // int32 uuid = 1;
  if (this->_internal_uuid() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_uuid());
  }

  // bool is_monster = 2;
  if (this->_internal_is_monster() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SUnitDemage::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SUnitDemage::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SUnitDemage::GetClassData() const { return &_class_data_; }

void SUnitDemage::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SUnitDemage *>(to)->MergeFrom(
      static_cast<const SUnitDemage &>(from));
}


void SUnitDemage::MergeFrom(const SUnitDemage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.SUnitDemage)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  demage_.MergeFrom(from.demage_);
  if (from._internal_uuid() != 0) {
    _internal_set_uuid(from._internal_uuid());
  }
  if (from._internal_is_monster() != 0) {
    _internal_set_is_monster(from._internal_is_monster());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SUnitDemage::CopyFrom(const SUnitDemage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.SUnitDemage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SUnitDemage::IsInitialized() const {
  return true;
}

void SUnitDemage::InternalSwap(SUnitDemage* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  demage_.InternalSwap(&other->demage_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SUnitDemage, is_monster_)
      + sizeof(SUnitDemage::is_monster_)
      - PROTOBUF_FIELD_OFFSET(SUnitDemage, uuid_)>(
          reinterpret_cast<char*>(&uuid_),
          reinterpret_cast<char*>(&other->uuid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SUnitDemage::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_GameService_2eproto_getter, &descriptor_table_GameService_2eproto_once,
      file_level_metadata_GameService_2eproto[20]);
}

// ===================================================================

class SRoomQuest::_Internal {
 public:
};

SRoomQuest::SRoomQuest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:protocol.SRoomQuest)
}
SRoomQuest::SRoomQuest(const SRoomQuest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&is_clear_, &from.is_clear_,
    static_cast<size_t>(reinterpret_cast<char*>(&sum_kill_) -
    reinterpret_cast<char*>(&is_clear_)) + sizeof(sum_kill_));
  // @@protoc_insertion_point(copy_constructor:protocol.SRoomQuest)
}

void SRoomQuest::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&is_clear_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&sum_kill_) -
    reinterpret_cast<char*>(&is_clear_)) + sizeof(sum_kill_));
}

SRoomQuest::~SRoomQuest() {
  // @@protoc_insertion_point(destructor:protocol.SRoomQuest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SRoomQuest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void SRoomQuest::ArenaDtor(void* object) {
  SRoomQuest* _this = reinterpret_cast< SRoomQuest* >(object);
  (void)_this;
}
void SRoomQuest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SRoomQuest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SRoomQuest::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.SRoomQuest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&is_clear_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&sum_kill_) -
      reinterpret_cast<char*>(&is_clear_)) + sizeof(sum_kill_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SRoomQuest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bool is_clear = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          is_clear_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 kill_count = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          kill_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 sum_kill = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          sum_kill_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SRoomQuest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.SRoomQuest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool is_clear = 1;
  if (this->_internal_is_clear() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_is_clear(), target);
  }

  // int32 kill_count = 2;
  if (this->_internal_kill_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_kill_count(), target);
  }

  // int32 sum_kill = 3;
  if (this->_internal_sum_kill() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_sum_kill(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.SRoomQuest)
  return target;
}

size_t SRoomQuest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.SRoomQuest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool is_clear = 1;
  if (this->_internal_is_clear() != 0) {
    total_size += 1 + 1;
  }

  // int32 kill_count = 2;
  if (this->_internal_kill_count() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_kill_count());
  }

  // int32 sum_kill = 3;
  if (this->_internal_sum_kill() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_sum_kill());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SRoomQuest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SRoomQuest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SRoomQuest::GetClassData() const { return &_class_data_; }

void SRoomQuest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SRoomQuest *>(to)->MergeFrom(
      static_cast<const SRoomQuest &>(from));
}


void SRoomQuest::MergeFrom(const SRoomQuest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.SRoomQuest)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_is_clear() != 0) {
    _internal_set_is_clear(from._internal_is_clear());
  }
  if (from._internal_kill_count() != 0) {
    _internal_set_kill_count(from._internal_kill_count());
  }
  if (from._internal_sum_kill() != 0) {
    _internal_set_sum_kill(from._internal_sum_kill());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SRoomQuest::CopyFrom(const SRoomQuest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.SRoomQuest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SRoomQuest::IsInitialized() const {
  return true;
}

void SRoomQuest::InternalSwap(SRoomQuest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SRoomQuest, sum_kill_)
      + sizeof(SRoomQuest::sum_kill_)
      - PROTOBUF_FIELD_OFFSET(SRoomQuest, is_clear_)>(
          reinterpret_cast<char*>(&is_clear_),
          reinterpret_cast<char*>(&other->is_clear_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SRoomQuest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_GameService_2eproto_getter, &descriptor_table_GameService_2eproto_once,
      file_level_metadata_GameService_2eproto[21]);
}

// ===================================================================

class CMovePotal::_Internal {
 public:
};

CMovePotal::CMovePotal(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:protocol.CMovePotal)
}
CMovePotal::CMovePotal(const CMovePotal& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&pre_room_id_, &from.pre_room_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&next_room_id_) -
    reinterpret_cast<char*>(&pre_room_id_)) + sizeof(next_room_id_));
  // @@protoc_insertion_point(copy_constructor:protocol.CMovePotal)
}

void CMovePotal::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&pre_room_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&next_room_id_) -
    reinterpret_cast<char*>(&pre_room_id_)) + sizeof(next_room_id_));
}

CMovePotal::~CMovePotal() {
  // @@protoc_insertion_point(destructor:protocol.CMovePotal)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CMovePotal::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CMovePotal::ArenaDtor(void* object) {
  CMovePotal* _this = reinterpret_cast< CMovePotal* >(object);
  (void)_this;
}
void CMovePotal::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMovePotal::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMovePotal::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.CMovePotal)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&pre_room_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&next_room_id_) -
      reinterpret_cast<char*>(&pre_room_id_)) + sizeof(next_room_id_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMovePotal::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 pre_room_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          pre_room_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 next_room_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          next_room_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMovePotal::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.CMovePotal)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 pre_room_id = 1;
  if (this->_internal_pre_room_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_pre_room_id(), target);
  }

  // int32 next_room_id = 2;
  if (this->_internal_next_room_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_next_room_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.CMovePotal)
  return target;
}

size_t CMovePotal::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.CMovePotal)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 pre_room_id = 1;
  if (this->_internal_pre_room_id() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_pre_room_id());
  }

  // int32 next_room_id = 2;
  if (this->_internal_next_room_id() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_next_room_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMovePotal::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CMovePotal::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMovePotal::GetClassData() const { return &_class_data_; }

void CMovePotal::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CMovePotal *>(to)->MergeFrom(
      static_cast<const CMovePotal &>(from));
}


void CMovePotal::MergeFrom(const CMovePotal& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.CMovePotal)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_pre_room_id() != 0) {
    _internal_set_pre_room_id(from._internal_pre_room_id());
  }
  if (from._internal_next_room_id() != 0) {
    _internal_set_next_room_id(from._internal_next_room_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMovePotal::CopyFrom(const CMovePotal& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.CMovePotal)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMovePotal::IsInitialized() const {
  return true;
}

void CMovePotal::InternalSwap(CMovePotal* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMovePotal, next_room_id_)
      + sizeof(CMovePotal::next_room_id_)
      - PROTOBUF_FIELD_OFFSET(CMovePotal, pre_room_id_)>(
          reinterpret_cast<char*>(&pre_room_id_),
          reinterpret_cast<char*>(&other->pre_room_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMovePotal::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_GameService_2eproto_getter, &descriptor_table_GameService_2eproto_once,
      file_level_metadata_GameService_2eproto[22]);
}

// ===================================================================

class SEndGame::_Internal {
 public:
};

SEndGame::SEndGame(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:protocol.SEndGame)
}
SEndGame::SEndGame(const SEndGame& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  end_game_ = from.end_game_;
  // @@protoc_insertion_point(copy_constructor:protocol.SEndGame)
}

void SEndGame::SharedCtor() {
end_game_ = false;
}

SEndGame::~SEndGame() {
  // @@protoc_insertion_point(destructor:protocol.SEndGame)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SEndGame::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void SEndGame::ArenaDtor(void* object) {
  SEndGame* _this = reinterpret_cast< SEndGame* >(object);
  (void)_this;
}
void SEndGame::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SEndGame::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SEndGame::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.SEndGame)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  end_game_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SEndGame::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bool end_game = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          end_game_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SEndGame::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.SEndGame)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool end_game = 1;
  if (this->_internal_end_game() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_end_game(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.SEndGame)
  return target;
}

size_t SEndGame::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.SEndGame)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool end_game = 1;
  if (this->_internal_end_game() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SEndGame::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SEndGame::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SEndGame::GetClassData() const { return &_class_data_; }

void SEndGame::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SEndGame *>(to)->MergeFrom(
      static_cast<const SEndGame &>(from));
}


void SEndGame::MergeFrom(const SEndGame& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.SEndGame)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_end_game() != 0) {
    _internal_set_end_game(from._internal_end_game());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SEndGame::CopyFrom(const SEndGame& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.SEndGame)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SEndGame::IsInitialized() const {
  return true;
}

void SEndGame::InternalSwap(SEndGame* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(end_game_, other->end_game_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SEndGame::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_GameService_2eproto_getter, &descriptor_table_GameService_2eproto_once,
      file_level_metadata_GameService_2eproto[23]);
}

// ===================================================================

class CBuyCharater::_Internal {
 public:
};

CBuyCharater::CBuyCharater(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:protocol.CBuyCharater)
}
CBuyCharater::CBuyCharater(const CBuyCharater& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArenaForAllocation());
  }
  ::memcpy(&charatertype_, &from.charatertype_,
    static_cast<size_t>(reinterpret_cast<char*>(&usecash_) -
    reinterpret_cast<char*>(&charatertype_)) + sizeof(usecash_));
  // @@protoc_insertion_point(copy_constructor:protocol.CBuyCharater)
}

void CBuyCharater::SharedCtor() {
name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&charatertype_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&usecash_) -
    reinterpret_cast<char*>(&charatertype_)) + sizeof(usecash_));
}

CBuyCharater::~CBuyCharater() {
  // @@protoc_insertion_point(destructor:protocol.CBuyCharater)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CBuyCharater::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CBuyCharater::ArenaDtor(void* object) {
  CBuyCharater* _this = reinterpret_cast< CBuyCharater* >(object);
  (void)_this;
}
void CBuyCharater::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CBuyCharater::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CBuyCharater::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.CBuyCharater)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmpty();
  ::memset(&charatertype_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&usecash_) -
      reinterpret_cast<char*>(&charatertype_)) + sizeof(usecash_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CBuyCharater::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 CharaterType = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          charatertype_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 useCash = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          usecash_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string name = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "protocol.CBuyCharater.name"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CBuyCharater::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.CBuyCharater)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 CharaterType = 1;
  if (this->_internal_charatertype() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_charatertype(), target);
  }

  // int32 useCash = 2;
  if (this->_internal_usecash() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_usecash(), target);
  }

  // string name = 3;
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "protocol.CBuyCharater.name");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.CBuyCharater)
  return target;
}

size_t CBuyCharater::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.CBuyCharater)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 3;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // int32 CharaterType = 1;
  if (this->_internal_charatertype() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_charatertype());
  }

  // int32 useCash = 2;
  if (this->_internal_usecash() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_usecash());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CBuyCharater::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CBuyCharater::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CBuyCharater::GetClassData() const { return &_class_data_; }

void CBuyCharater::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CBuyCharater *>(to)->MergeFrom(
      static_cast<const CBuyCharater &>(from));
}


void CBuyCharater::MergeFrom(const CBuyCharater& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.CBuyCharater)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_name().empty()) {
    _internal_set_name(from._internal_name());
  }
  if (from._internal_charatertype() != 0) {
    _internal_set_charatertype(from._internal_charatertype());
  }
  if (from._internal_usecash() != 0) {
    _internal_set_usecash(from._internal_usecash());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CBuyCharater::CopyFrom(const CBuyCharater& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.CBuyCharater)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CBuyCharater::IsInitialized() const {
  return true;
}

void CBuyCharater::InternalSwap(CBuyCharater* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &name_, lhs_arena,
      &other->name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CBuyCharater, usecash_)
      + sizeof(CBuyCharater::usecash_)
      - PROTOBUF_FIELD_OFFSET(CBuyCharater, charatertype_)>(
          reinterpret_cast<char*>(&charatertype_),
          reinterpret_cast<char*>(&other->charatertype_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CBuyCharater::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_GameService_2eproto_getter, &descriptor_table_GameService_2eproto_once,
      file_level_metadata_GameService_2eproto[24]);
}

// ===================================================================

class CBuyWeapon::_Internal {
 public:
};

CBuyWeapon::CBuyWeapon(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:protocol.CBuyWeapon)
}
CBuyWeapon::CBuyWeapon(const CBuyWeapon& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&weapontype_, &from.weapontype_,
    static_cast<size_t>(reinterpret_cast<char*>(&usecash_) -
    reinterpret_cast<char*>(&weapontype_)) + sizeof(usecash_));
  // @@protoc_insertion_point(copy_constructor:protocol.CBuyWeapon)
}

void CBuyWeapon::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&weapontype_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&usecash_) -
    reinterpret_cast<char*>(&weapontype_)) + sizeof(usecash_));
}

CBuyWeapon::~CBuyWeapon() {
  // @@protoc_insertion_point(destructor:protocol.CBuyWeapon)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CBuyWeapon::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CBuyWeapon::ArenaDtor(void* object) {
  CBuyWeapon* _this = reinterpret_cast< CBuyWeapon* >(object);
  (void)_this;
}
void CBuyWeapon::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CBuyWeapon::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CBuyWeapon::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.CBuyWeapon)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&weapontype_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&usecash_) -
      reinterpret_cast<char*>(&weapontype_)) + sizeof(usecash_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CBuyWeapon::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 weaponType = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          weapontype_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 useCash = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          usecash_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CBuyWeapon::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.CBuyWeapon)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 weaponType = 1;
  if (this->_internal_weapontype() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_weapontype(), target);
  }

  // int32 useCash = 2;
  if (this->_internal_usecash() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_usecash(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.CBuyWeapon)
  return target;
}

size_t CBuyWeapon::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.CBuyWeapon)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 weaponType = 1;
  if (this->_internal_weapontype() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_weapontype());
  }

  // int32 useCash = 2;
  if (this->_internal_usecash() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_usecash());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CBuyWeapon::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CBuyWeapon::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CBuyWeapon::GetClassData() const { return &_class_data_; }

void CBuyWeapon::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CBuyWeapon *>(to)->MergeFrom(
      static_cast<const CBuyWeapon &>(from));
}


void CBuyWeapon::MergeFrom(const CBuyWeapon& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.CBuyWeapon)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_weapontype() != 0) {
    _internal_set_weapontype(from._internal_weapontype());
  }
  if (from._internal_usecash() != 0) {
    _internal_set_usecash(from._internal_usecash());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CBuyWeapon::CopyFrom(const CBuyWeapon& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.CBuyWeapon)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CBuyWeapon::IsInitialized() const {
  return true;
}

void CBuyWeapon::InternalSwap(CBuyWeapon* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CBuyWeapon, usecash_)
      + sizeof(CBuyWeapon::usecash_)
      - PROTOBUF_FIELD_OFFSET(CBuyWeapon, weapontype_)>(
          reinterpret_cast<char*>(&weapontype_),
          reinterpret_cast<char*>(&other->weapontype_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CBuyWeapon::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_GameService_2eproto_getter, &descriptor_table_GameService_2eproto_once,
      file_level_metadata_GameService_2eproto[25]);
}

// ===================================================================

class SBuyResult::_Internal {
 public:
};

SBuyResult::SBuyResult(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  charater_(arena),
  weaponlist_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:protocol.SBuyResult)
}
SBuyResult::SBuyResult(const SBuyResult& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      charater_(from.charater_),
      weaponlist_(from.weaponlist_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&result_, &from.result_,
    static_cast<size_t>(reinterpret_cast<char*>(&cash_) -
    reinterpret_cast<char*>(&result_)) + sizeof(cash_));
  // @@protoc_insertion_point(copy_constructor:protocol.SBuyResult)
}

void SBuyResult::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&result_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&cash_) -
    reinterpret_cast<char*>(&result_)) + sizeof(cash_));
}

SBuyResult::~SBuyResult() {
  // @@protoc_insertion_point(destructor:protocol.SBuyResult)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SBuyResult::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void SBuyResult::ArenaDtor(void* object) {
  SBuyResult* _this = reinterpret_cast< SBuyResult* >(object);
  (void)_this;
}
void SBuyResult::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SBuyResult::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SBuyResult::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.SBuyResult)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  charater_.Clear();
  weaponlist_.Clear();
  ::memset(&result_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&cash_) -
      reinterpret_cast<char*>(&result_)) + sizeof(cash_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SBuyResult::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 result = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          result_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .protocol.Charater charater = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_charater(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // int32 curCharaterType = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          curcharatertype_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 curWeaponType = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          curweapontype_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 cash = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          cash_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated int32 weaponList = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_weaponlist(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48) {
          _internal_add_weaponlist(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SBuyResult::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.SBuyResult)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 result = 1;
  if (this->_internal_result() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_result(), target);
  }

  // repeated .protocol.Charater charater = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_charater_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_charater(i), target, stream);
  }

  // int32 curCharaterType = 3;
  if (this->_internal_curcharatertype() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_curcharatertype(), target);
  }

  // int32 curWeaponType = 4;
  if (this->_internal_curweapontype() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_curweapontype(), target);
  }

  // int32 cash = 5;
  if (this->_internal_cash() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_cash(), target);
  }

  // repeated int32 weaponList = 6;
  {
    int byte_size = _weaponlist_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          6, _internal_weaponlist(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.SBuyResult)
  return target;
}

size_t SBuyResult::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.SBuyResult)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .protocol.Charater charater = 2;
  total_size += 1UL * this->_internal_charater_size();
  for (const auto& msg : this->charater_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated int32 weaponList = 6;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->weaponlist_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _weaponlist_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // int32 result = 1;
  if (this->_internal_result() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_result());
  }

  // int32 curCharaterType = 3;
  if (this->_internal_curcharatertype() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_curcharatertype());
  }

  // int32 curWeaponType = 4;
  if (this->_internal_curweapontype() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_curweapontype());
  }

  // int32 cash = 5;
  if (this->_internal_cash() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_cash());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SBuyResult::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SBuyResult::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SBuyResult::GetClassData() const { return &_class_data_; }

void SBuyResult::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SBuyResult *>(to)->MergeFrom(
      static_cast<const SBuyResult &>(from));
}


void SBuyResult::MergeFrom(const SBuyResult& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.SBuyResult)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  charater_.MergeFrom(from.charater_);
  weaponlist_.MergeFrom(from.weaponlist_);
  if (from._internal_result() != 0) {
    _internal_set_result(from._internal_result());
  }
  if (from._internal_curcharatertype() != 0) {
    _internal_set_curcharatertype(from._internal_curcharatertype());
  }
  if (from._internal_curweapontype() != 0) {
    _internal_set_curweapontype(from._internal_curweapontype());
  }
  if (from._internal_cash() != 0) {
    _internal_set_cash(from._internal_cash());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SBuyResult::CopyFrom(const SBuyResult& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.SBuyResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SBuyResult::IsInitialized() const {
  return true;
}

void SBuyResult::InternalSwap(SBuyResult* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  charater_.InternalSwap(&other->charater_);
  weaponlist_.InternalSwap(&other->weaponlist_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SBuyResult, cash_)
      + sizeof(SBuyResult::cash_)
      - PROTOBUF_FIELD_OFFSET(SBuyResult, result_)>(
          reinterpret_cast<char*>(&result_),
          reinterpret_cast<char*>(&other->result_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SBuyResult::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_GameService_2eproto_getter, &descriptor_table_GameService_2eproto_once,
      file_level_metadata_GameService_2eproto[26]);
}

// ===================================================================

class CPlayerJump::_Internal {
 public:
};

CPlayerJump::CPlayerJump(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:protocol.CPlayerJump)
}
CPlayerJump::CPlayerJump(const CPlayerJump& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&isjump_, &from.isjump_,
    static_cast<size_t>(reinterpret_cast<char*>(&uuid_) -
    reinterpret_cast<char*>(&isjump_)) + sizeof(uuid_));
  // @@protoc_insertion_point(copy_constructor:protocol.CPlayerJump)
}

void CPlayerJump::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&isjump_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&uuid_) -
    reinterpret_cast<char*>(&isjump_)) + sizeof(uuid_));
}

CPlayerJump::~CPlayerJump() {
  // @@protoc_insertion_point(destructor:protocol.CPlayerJump)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CPlayerJump::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CPlayerJump::ArenaDtor(void* object) {
  CPlayerJump* _this = reinterpret_cast< CPlayerJump* >(object);
  (void)_this;
}
void CPlayerJump::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CPlayerJump::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CPlayerJump::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.CPlayerJump)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&isjump_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&uuid_) -
      reinterpret_cast<char*>(&isjump_)) + sizeof(uuid_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CPlayerJump::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bool isJump = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          isjump_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 uuid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          uuid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CPlayerJump::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.CPlayerJump)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool isJump = 1;
  if (this->_internal_isjump() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_isjump(), target);
  }

  // int32 uuid = 2;
  if (this->_internal_uuid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_uuid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.CPlayerJump)
  return target;
}

size_t CPlayerJump::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.CPlayerJump)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool isJump = 1;
  if (this->_internal_isjump() != 0) {
    total_size += 1 + 1;
  }

  // int32 uuid = 2;
  if (this->_internal_uuid() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_uuid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CPlayerJump::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CPlayerJump::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CPlayerJump::GetClassData() const { return &_class_data_; }

void CPlayerJump::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CPlayerJump *>(to)->MergeFrom(
      static_cast<const CPlayerJump &>(from));
}


void CPlayerJump::MergeFrom(const CPlayerJump& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.CPlayerJump)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_isjump() != 0) {
    _internal_set_isjump(from._internal_isjump());
  }
  if (from._internal_uuid() != 0) {
    _internal_set_uuid(from._internal_uuid());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CPlayerJump::CopyFrom(const CPlayerJump& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.CPlayerJump)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CPlayerJump::IsInitialized() const {
  return true;
}

void CPlayerJump::InternalSwap(CPlayerJump* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CPlayerJump, uuid_)
      + sizeof(CPlayerJump::uuid_)
      - PROTOBUF_FIELD_OFFSET(CPlayerJump, isjump_)>(
          reinterpret_cast<char*>(&isjump_),
          reinterpret_cast<char*>(&other->isjump_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CPlayerJump::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_GameService_2eproto_getter, &descriptor_table_GameService_2eproto_once,
      file_level_metadata_GameService_2eproto[27]);
}

// ===================================================================

class CPlayerAim::_Internal {
 public:
};

CPlayerAim::CPlayerAim(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:protocol.CPlayerAim)
}
CPlayerAim::CPlayerAim(const CPlayerAim& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&isaim_, &from.isaim_,
    static_cast<size_t>(reinterpret_cast<char*>(&uuid_) -
    reinterpret_cast<char*>(&isaim_)) + sizeof(uuid_));
  // @@protoc_insertion_point(copy_constructor:protocol.CPlayerAim)
}

void CPlayerAim::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&isaim_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&uuid_) -
    reinterpret_cast<char*>(&isaim_)) + sizeof(uuid_));
}

CPlayerAim::~CPlayerAim() {
  // @@protoc_insertion_point(destructor:protocol.CPlayerAim)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CPlayerAim::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CPlayerAim::ArenaDtor(void* object) {
  CPlayerAim* _this = reinterpret_cast< CPlayerAim* >(object);
  (void)_this;
}
void CPlayerAim::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CPlayerAim::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CPlayerAim::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.CPlayerAim)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&isaim_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&uuid_) -
      reinterpret_cast<char*>(&isaim_)) + sizeof(uuid_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CPlayerAim::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bool isAim = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          isaim_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 uuid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          uuid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CPlayerAim::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.CPlayerAim)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool isAim = 1;
  if (this->_internal_isaim() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_isaim(), target);
  }

  // int32 uuid = 2;
  if (this->_internal_uuid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_uuid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.CPlayerAim)
  return target;
}

size_t CPlayerAim::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.CPlayerAim)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool isAim = 1;
  if (this->_internal_isaim() != 0) {
    total_size += 1 + 1;
  }

  // int32 uuid = 2;
  if (this->_internal_uuid() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_uuid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CPlayerAim::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CPlayerAim::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CPlayerAim::GetClassData() const { return &_class_data_; }

void CPlayerAim::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CPlayerAim *>(to)->MergeFrom(
      static_cast<const CPlayerAim &>(from));
}


void CPlayerAim::MergeFrom(const CPlayerAim& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.CPlayerAim)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_isaim() != 0) {
    _internal_set_isaim(from._internal_isaim());
  }
  if (from._internal_uuid() != 0) {
    _internal_set_uuid(from._internal_uuid());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CPlayerAim::CopyFrom(const CPlayerAim& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.CPlayerAim)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CPlayerAim::IsInitialized() const {
  return true;
}

void CPlayerAim::InternalSwap(CPlayerAim* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CPlayerAim, uuid_)
      + sizeof(CPlayerAim::uuid_)
      - PROTOBUF_FIELD_OFFSET(CPlayerAim, isaim_)>(
          reinterpret_cast<char*>(&isaim_),
          reinterpret_cast<char*>(&other->isaim_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CPlayerAim::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_GameService_2eproto_getter, &descriptor_table_GameService_2eproto_once,
      file_level_metadata_GameService_2eproto[28]);
}

// ===================================================================

class SExpLv::_Internal {
 public:
};

SExpLv::SExpLv(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:protocol.SExpLv)
}
SExpLv::SExpLv(const SExpLv& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&uuid_, &from.uuid_,
    static_cast<size_t>(reinterpret_cast<char*>(&exp_) -
    reinterpret_cast<char*>(&uuid_)) + sizeof(exp_));
  // @@protoc_insertion_point(copy_constructor:protocol.SExpLv)
}

void SExpLv::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&uuid_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&exp_) -
    reinterpret_cast<char*>(&uuid_)) + sizeof(exp_));
}

SExpLv::~SExpLv() {
  // @@protoc_insertion_point(destructor:protocol.SExpLv)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SExpLv::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void SExpLv::ArenaDtor(void* object) {
  SExpLv* _this = reinterpret_cast< SExpLv* >(object);
  (void)_this;
}
void SExpLv::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SExpLv::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SExpLv::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.SExpLv)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&uuid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&exp_) -
      reinterpret_cast<char*>(&uuid_)) + sizeof(exp_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SExpLv::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 uuid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          uuid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 lv = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          lv_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 exp = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          exp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SExpLv::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.SExpLv)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 uuid = 1;
  if (this->_internal_uuid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_uuid(), target);
  }

  // int32 lv = 2;
  if (this->_internal_lv() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_lv(), target);
  }

  // int32 exp = 3;
  if (this->_internal_exp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_exp(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.SExpLv)
  return target;
}

size_t SExpLv::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.SExpLv)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 uuid = 1;
  if (this->_internal_uuid() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_uuid());
  }

  // int32 lv = 2;
  if (this->_internal_lv() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_lv());
  }

  // int32 exp = 3;
  if (this->_internal_exp() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_exp());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SExpLv::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SExpLv::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SExpLv::GetClassData() const { return &_class_data_; }

void SExpLv::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SExpLv *>(to)->MergeFrom(
      static_cast<const SExpLv &>(from));
}


void SExpLv::MergeFrom(const SExpLv& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.SExpLv)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_uuid() != 0) {
    _internal_set_uuid(from._internal_uuid());
  }
  if (from._internal_lv() != 0) {
    _internal_set_lv(from._internal_lv());
  }
  if (from._internal_exp() != 0) {
    _internal_set_exp(from._internal_exp());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SExpLv::CopyFrom(const SExpLv& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.SExpLv)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SExpLv::IsInitialized() const {
  return true;
}

void SExpLv::InternalSwap(SExpLv* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SExpLv, exp_)
      + sizeof(SExpLv::exp_)
      - PROTOBUF_FIELD_OFFSET(SExpLv, uuid_)>(
          reinterpret_cast<char*>(&uuid_),
          reinterpret_cast<char*>(&other->uuid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SExpLv::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_GameService_2eproto_getter, &descriptor_table_GameService_2eproto_once,
      file_level_metadata_GameService_2eproto[29]);
}

// ===================================================================

class ItemEquip::_Internal {
 public:
};

ItemEquip::ItemEquip(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:protocol.ItemEquip)
}
ItemEquip::ItemEquip(const ItemEquip& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  item_code_ = from.item_code_;
  // @@protoc_insertion_point(copy_constructor:protocol.ItemEquip)
}

void ItemEquip::SharedCtor() {
item_code_ = 0;
}

ItemEquip::~ItemEquip() {
  // @@protoc_insertion_point(destructor:protocol.ItemEquip)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ItemEquip::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ItemEquip::ArenaDtor(void* object) {
  ItemEquip* _this = reinterpret_cast< ItemEquip* >(object);
  (void)_this;
}
void ItemEquip::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ItemEquip::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ItemEquip::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.ItemEquip)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  item_code_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ItemEquip::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 item_code = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          item_code_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ItemEquip::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.ItemEquip)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 item_code = 1;
  if (this->_internal_item_code() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_item_code(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.ItemEquip)
  return target;
}

size_t ItemEquip::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.ItemEquip)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 item_code = 1;
  if (this->_internal_item_code() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_item_code());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ItemEquip::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ItemEquip::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ItemEquip::GetClassData() const { return &_class_data_; }

void ItemEquip::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ItemEquip *>(to)->MergeFrom(
      static_cast<const ItemEquip &>(from));
}


void ItemEquip::MergeFrom(const ItemEquip& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.ItemEquip)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_item_code() != 0) {
    _internal_set_item_code(from._internal_item_code());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ItemEquip::CopyFrom(const ItemEquip& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.ItemEquip)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ItemEquip::IsInitialized() const {
  return true;
}

void ItemEquip::InternalSwap(ItemEquip* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(item_code_, other->item_code_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ItemEquip::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_GameService_2eproto_getter, &descriptor_table_GameService_2eproto_once,
      file_level_metadata_GameService_2eproto[30]);
}

// ===================================================================

class ItemEtc::_Internal {
 public:
};

ItemEtc::ItemEtc(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:protocol.ItemEtc)
}
ItemEtc::ItemEtc(const ItemEtc& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&item_code_, &from.item_code_,
    static_cast<size_t>(reinterpret_cast<char*>(&item_count_) -
    reinterpret_cast<char*>(&item_code_)) + sizeof(item_count_));
  // @@protoc_insertion_point(copy_constructor:protocol.ItemEtc)
}

void ItemEtc::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&item_code_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&item_count_) -
    reinterpret_cast<char*>(&item_code_)) + sizeof(item_count_));
}

ItemEtc::~ItemEtc() {
  // @@protoc_insertion_point(destructor:protocol.ItemEtc)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ItemEtc::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ItemEtc::ArenaDtor(void* object) {
  ItemEtc* _this = reinterpret_cast< ItemEtc* >(object);
  (void)_this;
}
void ItemEtc::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ItemEtc::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ItemEtc::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.ItemEtc)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&item_code_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&item_count_) -
      reinterpret_cast<char*>(&item_code_)) + sizeof(item_count_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ItemEtc::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 item_code = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          item_code_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 item_count = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          item_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ItemEtc::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.ItemEtc)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 item_code = 1;
  if (this->_internal_item_code() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_item_code(), target);
  }

  // int32 item_count = 2;
  if (this->_internal_item_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_item_count(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.ItemEtc)
  return target;
}

size_t ItemEtc::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.ItemEtc)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 item_code = 1;
  if (this->_internal_item_code() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_item_code());
  }

  // int32 item_count = 2;
  if (this->_internal_item_count() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_item_count());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ItemEtc::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ItemEtc::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ItemEtc::GetClassData() const { return &_class_data_; }

void ItemEtc::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ItemEtc *>(to)->MergeFrom(
      static_cast<const ItemEtc &>(from));
}


void ItemEtc::MergeFrom(const ItemEtc& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.ItemEtc)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_item_code() != 0) {
    _internal_set_item_code(from._internal_item_code());
  }
  if (from._internal_item_count() != 0) {
    _internal_set_item_count(from._internal_item_count());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ItemEtc::CopyFrom(const ItemEtc& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.ItemEtc)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ItemEtc::IsInitialized() const {
  return true;
}

void ItemEtc::InternalSwap(ItemEtc* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ItemEtc, item_count_)
      + sizeof(ItemEtc::item_count_)
      - PROTOBUF_FIELD_OFFSET(ItemEtc, item_code_)>(
          reinterpret_cast<char*>(&item_code_),
          reinterpret_cast<char*>(&other->item_code_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ItemEtc::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_GameService_2eproto_getter, &descriptor_table_GameService_2eproto_once,
      file_level_metadata_GameService_2eproto[31]);
}

// ===================================================================

class DropMessage::_Internal {
 public:
};

DropMessage::DropMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  itemequips_(arena),
  itemetcs_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:protocol.DropMessage)
}
DropMessage::DropMessage(const DropMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      itemequips_(from.itemequips_),
      itemetcs_(from.itemetcs_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  gold_ = from.gold_;
  // @@protoc_insertion_point(copy_constructor:protocol.DropMessage)
}

void DropMessage::SharedCtor() {
gold_ = 0;
}

DropMessage::~DropMessage() {
  // @@protoc_insertion_point(destructor:protocol.DropMessage)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void DropMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void DropMessage::ArenaDtor(void* object) {
  DropMessage* _this = reinterpret_cast< DropMessage* >(object);
  (void)_this;
}
void DropMessage::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DropMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void DropMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.DropMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  itemequips_.Clear();
  itemetcs_.Clear();
  gold_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DropMessage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .protocol.ItemEquip itemEquips = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_itemequips(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .protocol.ItemEtc itemEtcs = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_itemetcs(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // int32 gold = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          gold_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DropMessage::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.DropMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .protocol.ItemEquip itemEquips = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_itemequips_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_itemequips(i), target, stream);
  }

  // repeated .protocol.ItemEtc itemEtcs = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_itemetcs_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_itemetcs(i), target, stream);
  }

  // int32 gold = 3;
  if (this->_internal_gold() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_gold(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.DropMessage)
  return target;
}

size_t DropMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.DropMessage)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .protocol.ItemEquip itemEquips = 1;
  total_size += 1UL * this->_internal_itemequips_size();
  for (const auto& msg : this->itemequips_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .protocol.ItemEtc itemEtcs = 2;
  total_size += 1UL * this->_internal_itemetcs_size();
  for (const auto& msg : this->itemetcs_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // int32 gold = 3;
  if (this->_internal_gold() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_gold());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DropMessage::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    DropMessage::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DropMessage::GetClassData() const { return &_class_data_; }

void DropMessage::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<DropMessage *>(to)->MergeFrom(
      static_cast<const DropMessage &>(from));
}


void DropMessage::MergeFrom(const DropMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.DropMessage)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  itemequips_.MergeFrom(from.itemequips_);
  itemetcs_.MergeFrom(from.itemetcs_);
  if (from._internal_gold() != 0) {
    _internal_set_gold(from._internal_gold());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DropMessage::CopyFrom(const DropMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.DropMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DropMessage::IsInitialized() const {
  return true;
}

void DropMessage::InternalSwap(DropMessage* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  itemequips_.InternalSwap(&other->itemequips_);
  itemetcs_.InternalSwap(&other->itemetcs_);
  swap(gold_, other->gold_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DropMessage::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_GameService_2eproto_getter, &descriptor_table_GameService_2eproto_once,
      file_level_metadata_GameService_2eproto[32]);
}

// ===================================================================

class SLoadInventory::_Internal {
 public:
};

SLoadInventory::SLoadInventory(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  itemequips_(arena),
  itemetcs_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:protocol.SLoadInventory)
}
SLoadInventory::SLoadInventory(const SLoadInventory& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      itemequips_(from.itemequips_),
      itemetcs_(from.itemetcs_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  gold_ = from.gold_;
  // @@protoc_insertion_point(copy_constructor:protocol.SLoadInventory)
}

void SLoadInventory::SharedCtor() {
gold_ = 0;
}

SLoadInventory::~SLoadInventory() {
  // @@protoc_insertion_point(destructor:protocol.SLoadInventory)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SLoadInventory::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void SLoadInventory::ArenaDtor(void* object) {
  SLoadInventory* _this = reinterpret_cast< SLoadInventory* >(object);
  (void)_this;
}
void SLoadInventory::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SLoadInventory::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SLoadInventory::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.SLoadInventory)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  itemequips_.Clear();
  itemetcs_.Clear();
  gold_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SLoadInventory::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .protocol.ItemEquip itemEquips = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_itemequips(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .protocol.ItemEtc itemEtcs = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_itemetcs(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // int32 gold = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          gold_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SLoadInventory::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.SLoadInventory)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .protocol.ItemEquip itemEquips = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_itemequips_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_itemequips(i), target, stream);
  }

  // repeated .protocol.ItemEtc itemEtcs = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_itemetcs_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_itemetcs(i), target, stream);
  }

  // int32 gold = 3;
  if (this->_internal_gold() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_gold(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.SLoadInventory)
  return target;
}

size_t SLoadInventory::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.SLoadInventory)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .protocol.ItemEquip itemEquips = 1;
  total_size += 1UL * this->_internal_itemequips_size();
  for (const auto& msg : this->itemequips_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .protocol.ItemEtc itemEtcs = 2;
  total_size += 1UL * this->_internal_itemetcs_size();
  for (const auto& msg : this->itemetcs_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // int32 gold = 3;
  if (this->_internal_gold() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_gold());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SLoadInventory::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SLoadInventory::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SLoadInventory::GetClassData() const { return &_class_data_; }

void SLoadInventory::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SLoadInventory *>(to)->MergeFrom(
      static_cast<const SLoadInventory &>(from));
}


void SLoadInventory::MergeFrom(const SLoadInventory& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.SLoadInventory)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  itemequips_.MergeFrom(from.itemequips_);
  itemetcs_.MergeFrom(from.itemetcs_);
  if (from._internal_gold() != 0) {
    _internal_set_gold(from._internal_gold());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SLoadInventory::CopyFrom(const SLoadInventory& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.SLoadInventory)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SLoadInventory::IsInitialized() const {
  return true;
}

void SLoadInventory::InternalSwap(SLoadInventory* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  itemequips_.InternalSwap(&other->itemequips_);
  itemetcs_.InternalSwap(&other->itemetcs_);
  swap(gold_, other->gold_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SLoadInventory::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_GameService_2eproto_getter, &descriptor_table_GameService_2eproto_once,
      file_level_metadata_GameService_2eproto[33]);
}

// ===================================================================

class CSellItems::_Internal {
 public:
};

CSellItems::CSellItems(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  itemequips_(arena),
  itemetcs_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:protocol.CSellItems)
}
CSellItems::CSellItems(const CSellItems& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      itemequips_(from.itemequips_),
      itemetcs_(from.itemetcs_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  gold_ = from.gold_;
  // @@protoc_insertion_point(copy_constructor:protocol.CSellItems)
}

void CSellItems::SharedCtor() {
gold_ = 0;
}

CSellItems::~CSellItems() {
  // @@protoc_insertion_point(destructor:protocol.CSellItems)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CSellItems::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CSellItems::ArenaDtor(void* object) {
  CSellItems* _this = reinterpret_cast< CSellItems* >(object);
  (void)_this;
}
void CSellItems::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CSellItems::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CSellItems::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.CSellItems)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  itemequips_.Clear();
  itemetcs_.Clear();
  gold_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CSellItems::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .protocol.ItemEquip itemEquips = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_itemequips(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .protocol.ItemEtc itemEtcs = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_itemetcs(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // int32 gold = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          gold_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CSellItems::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.CSellItems)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .protocol.ItemEquip itemEquips = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_itemequips_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_itemequips(i), target, stream);
  }

  // repeated .protocol.ItemEtc itemEtcs = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_itemetcs_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_itemetcs(i), target, stream);
  }

  // int32 gold = 3;
  if (this->_internal_gold() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_gold(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.CSellItems)
  return target;
}

size_t CSellItems::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.CSellItems)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .protocol.ItemEquip itemEquips = 1;
  total_size += 1UL * this->_internal_itemequips_size();
  for (const auto& msg : this->itemequips_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .protocol.ItemEtc itemEtcs = 2;
  total_size += 1UL * this->_internal_itemetcs_size();
  for (const auto& msg : this->itemetcs_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // int32 gold = 3;
  if (this->_internal_gold() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_gold());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CSellItems::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CSellItems::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CSellItems::GetClassData() const { return &_class_data_; }

void CSellItems::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CSellItems *>(to)->MergeFrom(
      static_cast<const CSellItems &>(from));
}


void CSellItems::MergeFrom(const CSellItems& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.CSellItems)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  itemequips_.MergeFrom(from.itemequips_);
  itemetcs_.MergeFrom(from.itemetcs_);
  if (from._internal_gold() != 0) {
    _internal_set_gold(from._internal_gold());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CSellItems::CopyFrom(const CSellItems& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.CSellItems)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSellItems::IsInitialized() const {
  return true;
}

void CSellItems::InternalSwap(CSellItems* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  itemequips_.InternalSwap(&other->itemequips_);
  itemetcs_.InternalSwap(&other->itemetcs_);
  swap(gold_, other->gold_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CSellItems::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_GameService_2eproto_getter, &descriptor_table_GameService_2eproto_once,
      file_level_metadata_GameService_2eproto[34]);
}

// ===================================================================

class DLoad::_Internal {
 public:
  static const ::protocol::Unit& unit(const DLoad* msg);
};

const ::protocol::Unit&
DLoad::_Internal::unit(const DLoad* msg) {
  return *msg->unit_;
}
DLoad::DLoad(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:protocol.DLoad)
}
DLoad::DLoad(const DLoad& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_unit()) {
    unit_ = new ::protocol::Unit(*from.unit_);
  } else {
    unit_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:protocol.DLoad)
}

void DLoad::SharedCtor() {
unit_ = nullptr;
}

DLoad::~DLoad() {
  // @@protoc_insertion_point(destructor:protocol.DLoad)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void DLoad::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete unit_;
}

void DLoad::ArenaDtor(void* object) {
  DLoad* _this = reinterpret_cast< DLoad* >(object);
  (void)_this;
}
void DLoad::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DLoad::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void DLoad::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.DLoad)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && unit_ != nullptr) {
    delete unit_;
  }
  unit_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DLoad::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .protocol.Unit unit = 101;
      case 101:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_unit(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DLoad::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.DLoad)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .protocol.Unit unit = 101;
  if (this->_internal_has_unit()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        101, _Internal::unit(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.DLoad)
  return target;
}

size_t DLoad::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.DLoad)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .protocol.Unit unit = 101;
  if (this->_internal_has_unit()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *unit_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DLoad::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    DLoad::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DLoad::GetClassData() const { return &_class_data_; }

void DLoad::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<DLoad *>(to)->MergeFrom(
      static_cast<const DLoad &>(from));
}


void DLoad::MergeFrom(const DLoad& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.DLoad)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_unit()) {
    _internal_mutable_unit()->::protocol::Unit::MergeFrom(from._internal_unit());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DLoad::CopyFrom(const DLoad& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.DLoad)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DLoad::IsInitialized() const {
  return true;
}

void DLoad::InternalSwap(DLoad* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(unit_, other->unit_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DLoad::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_GameService_2eproto_getter, &descriptor_table_GameService_2eproto_once,
      file_level_metadata_GameService_2eproto[35]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace protocol
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::protocol::Login* Arena::CreateMaybeMessage< ::protocol::Login >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protocol::Login >(arena);
}
template<> PROTOBUF_NOINLINE ::protocol::CreateCharacter* Arena::CreateMaybeMessage< ::protocol::CreateCharacter >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protocol::CreateCharacter >(arena);
}
template<> PROTOBUF_NOINLINE ::protocol::CUpdateAccount* Arena::CreateMaybeMessage< ::protocol::CUpdateAccount >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protocol::CUpdateAccount >(arena);
}
template<> PROTOBUF_NOINLINE ::protocol::SCurrentInfo* Arena::CreateMaybeMessage< ::protocol::SCurrentInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protocol::SCurrentInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::protocol::LoginAccess* Arena::CreateMaybeMessage< ::protocol::LoginAccess >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protocol::LoginAccess >(arena);
}
template<> PROTOBUF_NOINLINE ::protocol::Charater* Arena::CreateMaybeMessage< ::protocol::Charater >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protocol::Charater >(arena);
}
template<> PROTOBUF_NOINLINE ::protocol::Position* Arena::CreateMaybeMessage< ::protocol::Position >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protocol::Position >(arena);
}
template<> PROTOBUF_NOINLINE ::protocol::Unit* Arena::CreateMaybeMessage< ::protocol::Unit >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protocol::Unit >(arena);
}
template<> PROTOBUF_NOINLINE ::protocol::SLoad* Arena::CreateMaybeMessage< ::protocol::SLoad >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protocol::SLoad >(arena);
}
template<> PROTOBUF_NOINLINE ::protocol::CLoad* Arena::CreateMaybeMessage< ::protocol::CLoad >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protocol::CLoad >(arena);
}
template<> PROTOBUF_NOINLINE ::protocol::SInsertplayer* Arena::CreateMaybeMessage< ::protocol::SInsertplayer >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protocol::SInsertplayer >(arena);
}
template<> PROTOBUF_NOINLINE ::protocol::SMove* Arena::CreateMaybeMessage< ::protocol::SMove >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protocol::SMove >(arena);
}
template<> PROTOBUF_NOINLINE ::protocol::SChat* Arena::CreateMaybeMessage< ::protocol::SChat >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protocol::SChat >(arena);
}
template<> PROTOBUF_NOINLINE ::protocol::SPlayerData* Arena::CreateMaybeMessage< ::protocol::SPlayerData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protocol::SPlayerData >(arena);
}
template<> PROTOBUF_NOINLINE ::protocol::SClosePlayer* Arena::CreateMaybeMessage< ::protocol::SClosePlayer >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protocol::SClosePlayer >(arena);
}
template<> PROTOBUF_NOINLINE ::protocol::UnitState* Arena::CreateMaybeMessage< ::protocol::UnitState >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protocol::UnitState >(arena);
}
template<> PROTOBUF_NOINLINE ::protocol::SUnitStates* Arena::CreateMaybeMessage< ::protocol::SUnitStates >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protocol::SUnitStates >(arena);
}
template<> PROTOBUF_NOINLINE ::protocol::Attack* Arena::CreateMaybeMessage< ::protocol::Attack >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protocol::Attack >(arena);
}
template<> PROTOBUF_NOINLINE ::protocol::CAttack* Arena::CreateMaybeMessage< ::protocol::CAttack >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protocol::CAttack >(arena);
}
template<> PROTOBUF_NOINLINE ::protocol::Demage* Arena::CreateMaybeMessage< ::protocol::Demage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protocol::Demage >(arena);
}
template<> PROTOBUF_NOINLINE ::protocol::SUnitDemage* Arena::CreateMaybeMessage< ::protocol::SUnitDemage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protocol::SUnitDemage >(arena);
}
template<> PROTOBUF_NOINLINE ::protocol::SRoomQuest* Arena::CreateMaybeMessage< ::protocol::SRoomQuest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protocol::SRoomQuest >(arena);
}
template<> PROTOBUF_NOINLINE ::protocol::CMovePotal* Arena::CreateMaybeMessage< ::protocol::CMovePotal >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protocol::CMovePotal >(arena);
}
template<> PROTOBUF_NOINLINE ::protocol::SEndGame* Arena::CreateMaybeMessage< ::protocol::SEndGame >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protocol::SEndGame >(arena);
}
template<> PROTOBUF_NOINLINE ::protocol::CBuyCharater* Arena::CreateMaybeMessage< ::protocol::CBuyCharater >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protocol::CBuyCharater >(arena);
}
template<> PROTOBUF_NOINLINE ::protocol::CBuyWeapon* Arena::CreateMaybeMessage< ::protocol::CBuyWeapon >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protocol::CBuyWeapon >(arena);
}
template<> PROTOBUF_NOINLINE ::protocol::SBuyResult* Arena::CreateMaybeMessage< ::protocol::SBuyResult >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protocol::SBuyResult >(arena);
}
template<> PROTOBUF_NOINLINE ::protocol::CPlayerJump* Arena::CreateMaybeMessage< ::protocol::CPlayerJump >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protocol::CPlayerJump >(arena);
}
template<> PROTOBUF_NOINLINE ::protocol::CPlayerAim* Arena::CreateMaybeMessage< ::protocol::CPlayerAim >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protocol::CPlayerAim >(arena);
}
template<> PROTOBUF_NOINLINE ::protocol::SExpLv* Arena::CreateMaybeMessage< ::protocol::SExpLv >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protocol::SExpLv >(arena);
}
template<> PROTOBUF_NOINLINE ::protocol::ItemEquip* Arena::CreateMaybeMessage< ::protocol::ItemEquip >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protocol::ItemEquip >(arena);
}
template<> PROTOBUF_NOINLINE ::protocol::ItemEtc* Arena::CreateMaybeMessage< ::protocol::ItemEtc >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protocol::ItemEtc >(arena);
}
template<> PROTOBUF_NOINLINE ::protocol::DropMessage* Arena::CreateMaybeMessage< ::protocol::DropMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protocol::DropMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::protocol::SLoadInventory* Arena::CreateMaybeMessage< ::protocol::SLoadInventory >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protocol::SLoadInventory >(arena);
}
template<> PROTOBUF_NOINLINE ::protocol::CSellItems* Arena::CreateMaybeMessage< ::protocol::CSellItems >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protocol::CSellItems >(arena);
}
template<> PROTOBUF_NOINLINE ::protocol::DLoad* Arena::CreateMaybeMessage< ::protocol::DLoad >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protocol::DLoad >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
